["```py\n./bin/pyspark --master local[n]\n```", "```py\n$SPARK_HOME/bin/pyspark --packages graphframes:graphframes:0.5.0-spark2.3-s_2.11\n```", "```py\n$ ./bin/pyspark --master local --packages graphframes:graphframes:0.5.0-spark2.1-s_2.11\n...\ngraphframes#graphframes added as a dependency\n:: resolving dependencies :: org.apache.spark#spark-submit-parent;1.0\n  confs: [default]\n  found graphframes#graphframes;0.5.0-spark2.1-s_2.11 in spark-packages\n  found com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2 in central\n  found com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2 in central\n  found org.scala-lang#scala-reflect;2.11.0 in central\n  found org.slf4j#slf4j-api;1.7.7 in central\ndownloading http://dl.bintray.com/spark-packages/maven/graphframes/graphframes/0.5.0-spark2.1-s_2.11/graphframes-0.5.0-spark2.1-s_2.11.jar ...\n  [SUCCESSFUL ] graphframes#graphframes;0.5.0-spark2.1-s_2.11!graphframes.jar (600ms)\n:: resolution report :: resolve 1503ms :: artifacts dl 608ms\n  :: modules in use:\n  com.typesafe.scala-logging#scala-logging-api_2.11;2.1.2 from central in [default]\n  com.typesafe.scala-logging#scala-logging-slf4j_2.11;2.1.2 from central in [default]\n  graphframes#graphframes;0.5.0-spark2.1-s_2.11 from spark-packages in [default]\n  org.scala-lang#scala-reflect;2.11.0 from central in [default]\n  org.slf4j#slf4j-api;1.7.7 from central in [default]\n  ---------------------------------------------------------------------\n  | | modules || artifacts |\n  | conf | number| search|dwnlded|evicted|| number|dwnlded|\n```", "```py\n\n  ---------------------------------------------------------------------\n  | default | 5 | 1 | 1 | 0 || 5 | 1 |\n  ---------------------------------------------------------------------\n:: retrieving :: org.apache.spark#spark-submit-parent\n  confs: [default]\n  1 artifacts copied, 4 already retrieved (323kB/9ms)\n```", "```py\n# Set File Paths\ndelays_fp = \"/data/departuredelays.csv\"\napts_fp = \"/data/airport-codes-na.txt\"\n\n# Obtain airports dataset\napts = spark.read.csv(apts_fp, header='true', inferSchema='true', sep='\\t')\napts.createOrReplaceTempView(\"apts\")\n\n# Obtain departure Delays data\ndeptsDelays = spark.read.csv(delays_fp, header='true', inferSchema='true')\ndeptsDelays.createOrReplaceTempView(\"deptsDelays\")\ndeptsDelays.cache()\n\n# Available IATA codes from the departuredelays sample dataset\niata = spark.sql(\"\"\"\n    select distinct iata \n    from (\n        select distinct origin as iata \n        from deptsDelays \n\n        union all \n        select distinct destination as iata \n        from deptsDelays\n    ) as a\n\"\"\")\niata.createOrReplaceTempView(\"iata\")\n```", "```py\n\n# Only include airports with atleast one trip from the departureDelays dataset\nairports = sqlContext.sql(\"\"\"\n    select f.IATA\n        , f.City\n        , f.State\n        , f.Country \n    from apts as f \n    join iata as t \n        on t.IATA = f.IATA\n\"\"\")\nairports.registerTempTable(\"airports\")\nairports.cache()\n```", "```py\nimport pyspark.sql.functions as f\nimport pyspark.sql.types as t\n\n@f.udf\ndef toDate(weirdDate):\n    year = '2014-'\n    month = weirdDate[0:2] + '-'\n    day = weirdDate[2:4] + ' '\n    hour = weirdDate[4:6] + ':'\n    minute = weirdDate[6:8] + ':00'\n```", "```py\n\n    return year + month + day + hour + minute \n\ndeptsDelays = deptsDelays.withColumn('normalDate', toDate(deptsDelays.date))\ndeptsDelays.createOrReplaceTempView(\"deptsDelays\")\n\n# Get key attributes of a flight\ndeptsDelays_GEO = spark.sql(\"\"\"\n    select cast(f.date as int) as tripid\n        , cast(f.normalDate as timestamp) as `localdate`\n        , cast(f.delay as int)\n        , cast(f.distance as int)\n        , f.origin as src\n        , f.destination as dst\n        , o.city as city_src\n        , d.city as city_dst\n        , o.state as state_src\n        , d.state as state_dst \n    from deptsDelays as f \n    join airports as o \n        on o.iata = f.origin \n    join airports as d \n        on d.iata = f.destination\n\"\"\") \n\n# Create Temp View\ndeptsDelays_GEO.createOrReplaceTempView(\"deptsDelays_GEO\")\n\n# Cache and Count\ndeptsDelays_GEO.cache()\ndeptsDelays_GEO.count()\ndeptsDelays_GEO\u00a0DataFrame:\n```", "```py\nfrom pyspark.sql.functions import *\nfrom graphframes import *\n\n# Create Vertices (airports) and Edges (flights)\nvertices = airports.withColumnRenamed(\"IATA\", \"id\").distinct()\nedges = deptsDelays_geo.select(\"tripid\", \"delay\", \"src\", \"dst\", \"city_dst\", \"state_dst\")\n\n# Cache Vertices and Edges\nedges.cache()\nvertices.cache()\n\n# This GraphFrame builds up on the vertices and edges based on our trips (flights)\ngraph = GraphFrame(vertices, edges)\n```", "```py\nprint \"Airport count: %d\" % graph.vertices.count()\nprint \"Trips count: %d\" % graph.edges.count()\n```", "```py\nOutput:\n  Airports count: 279 \n  Trips count: 1361141\n```", "```py\nprint \"Early or on-time: %d\" % graph.edges.filter(\"delay <= 0\").count()\nprint \"Delayed: %d\" % graph.edges.filter(\"delay > 0\").count()\n\n# Output\nEarly or on-time: 780469\nDelayed: 580672\n```", "```py\ndisplay(\n    graph\n    .edges\n    .filter(\"src = 'SFO' and delay > 0\")\n    .groupBy(\"src\", \"dst\")\n    .avg(\"delay\")\n    .sort(desc(\"avg(delay)\"))\n)\n```", "```py\n# States with the longest cumulative delays (with individual delays > 100 minutes) \n# origin: Seattle\ndisplay(graph.edges.filter(\"src = 'SEA' and delay > 100\"))\n```", "```py\nedgesSubset = deptsDelays_GEO.select(\"tripid\", \"delay\", \"src\", \"dst\")\ngraphSmall = GraphFrame(vertices, edgesSubset)\n```", "```py\nmotifs = (\n    graphSmall\n    .find(\"(a)-[ab]->(b); (b)-[bc]->(c)\")\n    .filter(\"\"\"\n        (b.id = 'SFO') \n        and (ab.delay > 500 or bc.delay > 500) \n        and bc.tripid > ab.tripid \n        and bc.tripid < ab.tripid + 10000\n    \"\"\")\n)\ndisplay(motifs)\n```", "```py\ngraphSmall.find(\"(a)-[ab]->(b); (b)-[bc]->(c)\")\n```", "```py\nb.id = 'SFO'). We're also specifying any trips (that is, graph edges) where the delay is greater than 500 minutes (ab.delay > 500 or bc.delay > 500). We have also specified that the second leg of the trip must occur after the first leg of the trip (bc.tripid > ab.tripid and bc.tripid < ab.tripid + 10000\").\n```", "```py\nfilter(\"(b.id = 'SFO') and (ab.delay > 500 or bc.delay > 500) and bc.tripid > ab.tripid and bc.tripid < ab.tripid + 10000\")\n```", "```py\n# Determining Airport ranking of importance using `pageRank`\nranks = graph.pageRank(resetProbability=0.15, maxIter=5)\ndisplay(ranks.vertices.orderBy(ranks.vertices.pagerank.desc()).limit(20))\n```", "```py\nsubsetOfPaths = graph.bfs(\n   fromExpr = \"id = 'SEA'\",\n   toExpr = \"id = 'SFO'\",\n   maxPathLength = 1)\n\ndisplay(subsetOfPaths)\n```", "```py\nfromExpr = \"id = 'SEA'\",\ntoExpr = \"id = 'SFO'\n```", "```py\nsubsetOfPaths = graph.bfs(\n   fromExpr = \"id = 'SFO'\",\n   toExpr = \"id = 'BUF'\",\n   maxPathLength = 1)\n\ndisplay(subsetOfPaths)\n\nOutput:\n   OK\n```", "```py\nsubsetOfPaths = graph.bfs(\n   fromExpr = \"id = 'SFO'\",\n   toExpr = \"id = 'BUF'\",\n   maxPathLength = 2)\n\ndisplay(subsetOfPaths)\n```", "```py\ndisplay(subsetOfPaths.groupBy(\"v1.id\", \"v1.City\").count().orderBy(desc(\"count\")).limit(10))\n```", "```py\n%scala\npackage d3a\n\nimport org.apache.spark.sql._\nimport com.databricks.backend.daemon.driver.EnhancedRDDFunctions.displayHTML\n\ncase class Edge(src: String, dest: String, count: Long)\ncase class Node(name: String)\ncase class Link(source: Int, target: Int, value: Long)\ncase class Graph(nodes: Seq[Node], links: Seq[Link])\n\nobject graphs {\nval sqlContext = SQLContext.getOrCreate(org.apache.spark.SparkContext.getOrCreate())\nimport sqlContext.implicits._\n\ndef force(clicks: Dataset[Edge], height: Int = 100, width: Int = 960): Unit = {\n  val data = clicks.collect()\n  val nodes = (data.map(_.src) ++ data.map(_.dest)).map(_.replaceAll(\"_\", \" \")).toSet.toSeq.map(Node)\n  val links = data.map { t =>\n    Link(nodes.indexWhere(_.name == t.src.replaceAll(\"_\", \" \")), nodes.indexWhere(_.name == t.dest.replaceAll(\"_\", \" \")), t.count / 20 + 1)\n  }\n  showGraph(height, width, Seq(Graph(nodes, links)).toDF().toJSON.first())\n}\n\n/**\n * Displays a force directed graph using d3\n * input: {\"nodes\": [{\"name\": \"...\"}], \"links\": [{\"source\": 1, \"target\": 2, \"value\": 0}]}\n */\ndef showGraph(height: Int, width: Int, graph: String): Unit = {\n\ndisplayHTML(s\"\"\"<!DOCTYPE html>\n<html>\n  <head>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://mbostock.github.io/d3/talk/20111116/style.css\"/>\n    <style type=\"text/css\">\n      #states path {\n        fill: #ccc;\n        stroke: #fff;\n      }\n\n      path.arc {\n        pointer-events: none;\n        fill: none;\n        stroke: #000;\n        display: none;\n      }\n\n      path.cell {\n        fill: none;\n        pointer-events: all;\n      }\n\n      circle {\n        fill: steelblue;\n        fill-opacity: .8;\n        stroke: #fff;\n      }\n\n      #cells.voronoi path.cell {\n        stroke: brown;\n      }\n\n      #cells g:hover path.arc {\n        display: inherit;\n      }\n    </style>\n  </head>\n  <body>\n    <script src=\"img/d3.js\"></script>\n    <script src=\"img/d3.csv.js\"></script>\n    <script src=\"img/d3.geo.js\"></script>\n    <script src=\"img/d3.geom.js\"></script>\n    <script>\n      var graph = $graph;\n      var w = $width;\n      var h = $height;\n\n      var linksByOrigin = {};\n      var countByAirport = {};\n      var locationByAirport = {};\n      var positions = [];\n\n      var projection = d3.geo.azimuthal()\n          .mode(\"equidistant\")\n          .origin([-98, 38])\n          .scale(1400)\n          .translate([640, 360]);\n\n      var path = d3.geo.path()\n          .projection(projection);\n\n      var svg = d3.select(\"body\")\n          .insert(\"svg:svg\", \"h2\")\n          .attr(\"width\", w)\n          .attr(\"height\", h);\n\n      var states = svg.append(\"svg:g\")\n          .attr(\"id\", \"states\");\n\n      var circles = svg.append(\"svg:g\")\n          .attr(\"id\", \"circles\");\n\n      var cells = svg.append(\"svg:g\")\n          .attr(\"id\", \"cells\");\n\n      var arc = d3.geo.greatArc()\n          .source(function(d) { return locationByAirport[d.source]; })\n          .target(function(d) { return locationByAirport[d.target]; });\n\n      d3.select(\"input[type=checkbox]\").on(\"change\", function() {\n        cells.classed(\"voronoi\", this.checked);\n      });\n\n      // Draw US map.\n      d3.json(\"https://mbostock.github.io/d3/talk/20111116/us-states.json\", function(collection) {\n        states.selectAll(\"path\")\n          .data(collection.features)\n          .enter().append(\"svg:path\")\n          .attr(\"d\", path);\n      });\n\n      // Parse links\n      graph.links.forEach(function(link) {\n        var origin = graph.nodes[link.source].name;\n        var destination = graph.nodes[link.target].name;\n\n        var links = linksByOrigin[origin] || (linksByOrigin[origin] = []);\n        links.push({ source: origin, target: destination });\n\n        countByAirport[origin] = (countByAirport[origin] || 0) + 1;\n        countByAirport[destination] = (countByAirport[destination] || 0) + 1;\n      });\n\n      d3.csv(\"https://mbostock.github.io/d3/talk/20111116/airports.csv\", function(data) {\n\n      // Build list of airports.\n      var airports = graph.nodes.map(function(node) {\n        return data.find(function(airport) {\n          if (airport.iata === node.name) {\n            var location = [+airport.longitude, +airport.latitude];\n            locationByAirport[airport.iata] = location;\n            positions.push(projection(location));\n\n            return true;\n          } else {\n            return false;\n          }\n        });\n      });\n\n      // Compute the Voronoi diagram of airports' projected positions.\n      var polygons = d3.geom.voronoi(positions);\n\n      var g = cells.selectAll(\"g\")\n        .data(airports)\n        .enter().append(\"svg:g\");\n\n      g.append(\"svg:path\")\n        .attr(\"class\", \"cell\")\n        .attr(\"d\", function(d, i) { return \"M\" + polygons[i].join(\"L\") + \"Z\"; })\n        .on(\"mouseover\", function(d, i) { d3.select(\"h2 span\").text(d.name); });\n\n      g.selectAll(\"path.arc\")\n        .data(function(d) { return linksByOrigin[d.iata] || []; })\n        .enter().append(\"svg:path\")\n        .attr(\"class\", \"arc\")\n        .attr(\"d\", function(d) { return path(arc(d)); });\n\n      circles.selectAll(\"circle\")\n        .data(airports)\n        .enter().append(\"svg:circle\")\n        .attr(\"cx\", function(d, i) { return positions[i][0]; })\n        .attr(\"cy\", function(d, i) { return positions[i][1]; })\n        .attr(\"r\", function(d, i) { return Math.sqrt(countByAirport[d.iata]); })\n        .sort(function(a, b) { return countByAirport[b.iata] - countByAirport[a.iata]; });\n      });\n    </script>\n  </body>\n</html>\"\"\")\n  }\n\n  def help() = {\ndisplayHTML(\"\"\"\n<p>\nProduces a force-directed graph given a collection of edges of the following form:</br>\n<tt><font color=\"#a71d5d\">case class</font> <font color=\"#795da3\">Edge</font>(<font color=\"#ed6a43\">src</font>: <font color=\"#a71d5d\">String</font>, <font color=\"#ed6a43\">dest</font>: <font color=\"#a71d5d\">String</font>, <font color=\"#ed6a43\">count</font>: <font color=\"#a71d5d\">Long</font>)</tt>\n</p>\n<p>Usage:<br/>\n<tt>%scala</tt></br>\n<tt><font color=\"#a71d5d\">import</font> <font color=\"#ed6a43\">d3._</font></tt><br/>\n<tt><font color=\"#795da3\">graphs.force</font>(</br>\n  <font color=\"#ed6a43\">height</font> = <font color=\"#795da3\">500</font>,<br/>\n  <font color=\"#ed6a43\">width</font> = <font color=\"#795da3\">500</font>,<br/>\n  <font color=\"#ed6a43\">clicks</font>: <font color=\"#795da3\">Dataset</font>[<font color=\"#795da3\">Edge</font>])</tt>\n</p>\"\"\")\n  }\n}\n```", "```py\n%scala\n// On-time and Early Arrivals\nimport d3a._\ngraphs.force(\n height = 800,\n width = 1200,\n clicks = sql(\"\"\"select src, dst as dest, count(1) as count from deptsDelays_GEO where delay <= 0 group by src, dst\"\"\").as[Edge])\n```", "```py\npackage d3a, which specifies the JavaScript calls that define our airport visualization. As you dive into the code, you'll notice that this is a force-directed graph\u00a0(def force) visualization that shows a graph (show graph) that builds up the map of the US and location of the airports (blue bubbles).\n```", "```py\ndef force(clicks: Dataset[Edge], height: Int = 100, width: Int = 960): Unit = {\n  ...\n  showGraph(height, width, Seq(Graph(nodes, links)).toDF().toJSON.first())\n}\n```", "```py\n%scala\n// On-time and Early Arrivals\nimport d3a._\ngraphs.force(\n  height = 800,\n  width = 1200,\n  clicks = sql(\"\"\"select src, dst as dest, count(1) as count from deptsDelays_GEO where delay <= 0 group by src, dst\"\"\").as[Edge])\n```"]