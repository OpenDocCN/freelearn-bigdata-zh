["```py\nnc -lk 9999\n```", "```py\n$nc -lk 9999\nblue blue blue blue blue green green green\ngohawks\ngreen green \n```", "```py\n#\n# streaming_word_count.py\n#\n\n# Import the necessary classes and create a local SparkContext and Streaming Contexts\nfrom pyspark import SparkContext\nfrom pyspark.streaming import StreamingContext\n\n# Create Spark Context with two working threads (note, `local[2]`)\nsc = SparkContext(\"local[2]\", \"NetworkWordCount\")\n\n# Create local StreamingContextwith batch interval of 1 second\nssc = StreamingContext(sc, 1)\n\n# Create DStream that will connect to the stream of input lines from connection to localhost:9999\nlines = ssc.socketTextStream(\"localhost\", 9999)\n\n# Split lines into words\nwords = lines.flatMap(lambda line: line.split(\" \"))\n\n# Count each word in each batch\npairs = words.map(lambda word: (word, 1))\nwordCounts = pairs.reduceByKey(lambda x, y: x + y)\n\n# Print the first ten elements of each RDD generated in this DStream to the console\nwordCounts.pprint()\n\n# Start the computation\nssc.start()\n\n# Wait for the computation to terminate\nssc.awaitTermination()\n```", "```py\n./bin/spark-submit streaming_word_count.py localhost 9999\n```", "```py\n$ ./bin/spark-submit streaming_word_count.py localhost 9999\n-------------------------------------------\nTime: 2018-06-21 23:00:30\n-------------------------------------------\n(u'blue', 5)\n(u'green', 3)\n-------------------------------------------\nTime: 2018-06-21 23:00:31\n-------------------------------------------\n(u'gohawks', 1)\n-------------------------------------------\nTime: 2018-06-21 23:00:32\n-------------------------------------------\n-------------------------------------------\nTime: 2018-06-21 23:00:33\n-------------------------------------------\n(u'green', 2)\n------------------------------------------- \n\n```", "```py\ncp log4j.properties.template log4j.properties\n```", "```py\nlog4j.rootCategory=INFO, console\n```", "```py\nlog4j.rootCategory=ERROR, console\n```", "```py\nnc -lk 9999\n```", "```py\n$nc -lk 9999\nblue blue blue blue blue green green green\ngohawks\ngreen green \n```", "```py\n#\n# stateful_streaming_word_count.py\n#\n\n# Import the necessary classes and create a local SparkContext and Streaming Contexts\nfrom pyspark import SparkContext\nfrom pyspark.streaming import StreamingContext\n\n# Create Spark Context with two working threads (note, `local[2]`)\nsc = SparkContext(\"local[2]\", \"StatefulNetworkWordCount\")\n\n# Create local StreamingContextwith batch interval of 1 second\nssc = StreamingContext(sc, 1)\n\n# Create checkpoint for local StreamingContext\nssc.checkpoint(\"checkpoint\")\n\n# Define updateFunc: sum of the (key, value) pairs\ndef updateFunc(new_values, last_sum):\n   return sum(new_values) + (last_sum or 0)\n\n# Create DStream that will connect to the stream of input lines from connection to localhost:9999\nlines = ssc.socketTextStream(\"localhost\", 9999)\n\n# Calculate running counts\n# Line 1: Split lines in to words\n# Line 2: count each word in each batch\n# Line 3: Run `updateStateByKey` to running count\nrunning_counts = lines.flatMap(lambda line: line.split(\" \"))\\\n          .map(lambda word: (word, 1))\\\n          .updateStateByKey(updateFunc)\n\n# Print the first ten elements of each RDD generated in this stateful DStream to the console\nrunning_counts.pprint()\n\n# Start the computation\nssc.start() \n\n# Wait for the computation to terminate\nssc.awaitTermination() \n```", "```py\n./bin/spark-submit stateful_streaming_word_count.py localhost 9999\n```", "```py\n$ ./bin/spark-submit stateful_streaming_word_count.py localhost 9999\n-------------------------------------------\nTime: 2018-06-21 23:00:30\n-------------------------------------------\n(u'blue', 5)\n(u'green', 3)\n-------------------------------------------\nTime: 2018-06-21 23:00:31\n-------------------------------------------\n(u'blue', 5)\n(u'green', 3)\n(u'gohawks', 1)\n-------------------------------------------\nTime: 2018-06-21 23:00:32\n-------------------------------------------\n-------------------------------------------\nTime: 2018-06-21 23:00:33\n-------------------------------------------\n(u'blue', 5)\n(u'green', 5)\n(u'gohawks', 1)\n------------------------------------------- \n\n```", "```py\nnc -lk 9999\n```", "```py\n$nc -lk 9999\nblue blue blue blue blue green green green\ngohawks\ngreen green \n```", "```py\n#\n# structured_streaming_word_count.py\n#\n\n# Import the necessary classes and create a local SparkSession\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import explode\nfrom pyspark.sql.functions import split\n\nspark = SparkSession \\\n  .builder \\\n  .appName(\"StructuredNetworkWordCount\") \\\n  .getOrCreate()\n\n # Create DataFrame representing the stream of input lines from connection to localhost:9999\nlines = spark\\\n  .readStream\\\n  .format('socket')\\\n  .option('host', 'localhost')\\\n  .option('port', 9999)\\\n  .load()\n\n# Split the lines into words\nwords = lines.select(\n  explode(\n      split(lines.value, ' ')\n  ).alias('word')\n)\n\n# Generate running word count\nwordCounts = words.groupBy('word').count()\n\n# Start running the query that prints the running counts to the console\nquery = wordCounts\\\n  .writeStream\\\n  .outputMode('complete')\\\n  .format('console')\\\n  .start()\n\n# Await Spark Streaming termination\nquery.awaitTermination()\n```", "```py\n./bin/spark-submit structured_streaming_word_count.py localhost 9999\n```", "```py\n$ ./bin/spark-submit structured_streaming_word_count.py localhost 9999\n-------------------------------------------\nBatch: 0\n-------------------------------------------\n+-----+-----+\n| word|count|\n+-----+-----+\n|green|    3|\n| blue|    5|\n+-----+-----+\n\n-------------------------------------------\nBatch: 1\n-------------------------------------------\n+-------+-----+\n|   word|count|\n+-------+-----+\n|  green|    3|\n|   blue|    5|\n|gohawks|    1|\n+-------+-----+\n\n-------------------------------------------\nBatch: 2\n-------------------------------------------\n+-------+-----+\n|   word|count|\n+-------+-----+\n|  green|    5|\n|   blue|    5|\n|gohawks|    1|\n+-------+-----+\n```"]