["```scala\nsudo rpm -ivh jdk-7u<version>-linux-x64.rpm \n```", "```scala\nexport JAVA_HOME=/usr/java/jdk<version>\n```", "```scala\nexport PATH=$JAVA_HOME/bin:$PATH \n```", "```scala\nsource ~/.bashrc\n```", "```scala\njava -version  \n```", "```scala\njava version \"1.7.0_71\"\nJava(TM) SE Runtime Environment (build 1.7.0_71-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode) \n```", "```scala\ncd $ZK_HOME/conf \ntouch zoo.cfg \n```", "```scala\ntickTime=2000 \ndataDir=/var/zookeeper \nclientPort=2181 \ninitLimit=5 \nsyncLimit=2 \nserver.1=zoo1:2888:3888 \nserver.2=zoo2:2888:3888 \nserver.3=zoo3.2888.3888  \n```", "```scala\nAt zoo1 /var/zookeeper/myid contains 1 \nAt zoo2 /var/zookeeper/myid contains 2 \nAt zoo3 /var/zookeeper/myid contains 3  \n```", "```scala\nbin/zkServer.sh start  \n```", "```scala\nbin/zkServer.sh status \n```", "```scala\nJMX enabled by default \nUsing config: /home/root/zookeeper-3.4.6/bin/../conf/zoo.cfg \nMode: follower   \n```", "```scala\nbin/zkServer.sh status  \n```", "```scala\nJMX enabled by default \nUsing config: /home/root/zookeeper-3.4.6/bin/../conf/zoo.cfg \nMode: leader  \n```", "```scala\nbin/zkServer.sh status\n\n```", "```scala\nJMX enabled by default \nUsing config: /home/root/zookeeper-3.4.6/bin/../conf/zoo.cfg \nMode: follower  \n```", "```scala\nbin/zkServer.sh stop  \n```", "```scala\nbin/zkServer.sh status  \n```", "```scala\nJMX enabled by default \nUsing config: /home/root/zookeeper-3.4.6/bin/../conf/zoo.cfg \nMode: follower   \n```", "```scala\nbin/zkServer.sh status   \n```", "```scala\nJMX enabled by default \nUsing config: /home/root/zookeeper-3.4.6/bin/../conf/zoo.cfg \nMode: leader  \n```", "```scala\nbin/zkServer.sh status  \n```", "```scala\nstorm.zookeeper.servers: \n- \"zoo1\" \n- \"zoo2\" \n- \"zoo3\" \nstorm.zookeeper.port: 2181 \nnimbus.seeds: \"nimbus1,nimbus2\" \nstorm.local.dir: \"/tmp/storm-data\"  \n```", "```scala\nstorm.zookeeper.servers: \n- \"zoo1\" \n- \"zoo2\" \n- \"zoo3\" \nstorm.zookeeper.port: 2181 \nnimbus.seeds: \"nimbus1,nimbus2\" \nstorm.local.dir: \"/tmp/storm-data\" \nsupervisor.slots.ports: \n- 6700 \n- 6701 \n- 6702 \n- 6703  \n```", "```scala\n$> bin/storm nimbus &  \n```", "```scala\n$> bin/storm supervisor &  \n```", "```scala\n<dependency> \n  <groupId>org.apache.storm</groupId> \n  <artifactId>storm-core</artifactId> \n  <version>1.0.2</version> \n  <scope>provided<scope> \n</dependency> \n```", "```scala\n<build> \n  <plugins> \n    <plugin> \n      <artifactId>maven-assembly-plugin</artifactId> \n      <version>2.2.1</version> \n      <configuration> \n        <descriptorRefs> \n          <descriptorRef>jar-with-dependencies \n          </descriptorRef> \n        </descriptorRefs> \n        <archive> \n          <manifest> \n            <mainClass /> \n          </manifest> \n        </archive> \n      </configuration> \n      <executions> \n        <execution> \n          <id>make-assembly</id> \n          <phase>package</phase> \n          <goals> \n            <goal>single</goal> \n          </goals> \n        </execution> \n      </executions> \n    </plugin> \n  </plugins> \n</build> \n```", "```scala\npublic class SampleSpout extends BaseRichSpout { \n  private static final long serialVersionUID = 1L; \n\n  private static final Map<Integer, String> map = new HashMap<Integer, String>(); \n  static { \n    map.put(0, \"google\"); \n    map.put(1, \"facebook\"); \n    map.put(2, \"twitter\"); \n    map.put(3, \"youtube\"); \n    map.put(4, \"linkedin\"); \n  } \n  private SpoutOutputCollector spoutOutputCollector; \n\n  public void open(Map conf, TopologyContext context, SpoutOutputCollector spoutOutputCollector) { \n    // Open the spout \n    this.spoutOutputCollector = spoutOutputCollector; \n  } \n\n  public void nextTuple() { \n    // Storm cluster repeatedly calls this method to emita continuous \n    // stream of tuples. \n    final Random rand = new Random(); \n    // generate the random number from 0 to 4\\. \n    int randomNumber = rand.nextInt(5); \n    spoutOutputCollector.emit(new Values(map.get(randomNumber))); \n    try{ \n      Thread.sleep(5000); \n    }catch(Exception e) { \n      System.out.println(\"Failed to sleep the thread\"); \n    } \n  } \n\n  public void declareOutputFields(OutputFieldsDeclarer declarer) { \n\n  // emit the tuple with field \"site\" \n  declarer.declare(new Fields(\"site\")); \n  } \n} \n```", "```scala\npublic class SampleBolt extends BaseBasicBolt { \n  private static final long serialVersionUID = 1L; \n\n  public void execute(Tuple input, BasicOutputCollector collector) { \n    // fetched the field \"site\" from input tuple. \n    String test = input.getStringByField(\"site\"); \n    // print the value of field \"site\" on console. \n    System.out.println(\"######### Name of input site is : \" + test); \n  } \n\n  public void declareOutputFields(OutputFieldsDeclarer declarer) { \n  } \n} \n```", "```scala\npublic class SampleStormTopology { \n  public static void main(String[] args) throws AlreadyAliveException, InvalidTopologyException { \n    // create an instance of TopologyBuilder class \n    TopologyBuilder builder = new TopologyBuilder(); \n    // set the spout class \n    builder.setSpout(\"SampleSpout\", new SampleSpout(), 2); \n    // set the bolt class \n    builder.setBolt(\"SampleBolt\", new SampleBolt(), 4).shuffleGrouping(\"SampleSpout\"); \n    Config conf = new Config(); \n    conf.setDebug(true); \n    // create an instance of LocalCluster class for \n    // executing topology in local mode. \n    LocalCluster cluster = new LocalCluster(); \n    // SampleStormTopology is the name of submitted topology \n    cluster.submitTopology(\"SampleStormTopology\", conf, builder.createTopology()); \n    try { \n      Thread.sleep(100000); \n    } catch (Exception exception) { \n      System.out.println(\"Thread interrupted exception : \" + exception); \n    } \n    // kill the SampleStormTopology \n    cluster.killTopology(\"SampleStormTopology\"); \n    // shutdown the storm test cluster \n    cluster.shutdown(); \n  } \n} \n```", "```scala\n$> cd $STORM_EXAMPLE_HOME \n$> mvn compile exec:java -Dexec.classpathScope=compile -Dexec.mainClass=com.stormadvance.storm_example.SampleStormTopology \n```", "```scala\npublic class SampleStormClusterTopology { \n  public static void main(String[] args) throws AlreadyAliveException, InvalidTopologyException { \n    // create an instance of TopologyBuilder class \n    TopologyBuilder builder = new TopologyBuilder(); \n    // set the spout class \n    builder.setSpout(\"SampleSpout\", new SampleSpout(), 2); \n    // set the bolt class \n    builder.setBolt(\"SampleBolt\", new SampleBolt(), 4).shuffleGrouping(\"SampleSpout\"); \n    Config conf = new Config(); \n    conf.setNumWorkers(3); \n    // This statement submit the topology on remote \n    // args[0] = name of topology \n    try { \n      StormSubmitter.submitTopology(args[0], conf, builder.createTopology()); \n    } catch (AlreadyAliveException alreadyAliveException) { \n      System.out.println(alreadyAliveException); \n    } catch (InvalidTopologyException invalidTopologyException) { \n      System.out.println(invalidTopologyException); \n    } catch (AuthorizationException e) { \n      // TODO Auto-generated catch block \n      e.printStackTrace(); \n    } \n  } \n} \n```", "```scala\nmvn clean install  \n```", "```scala\n    ------------------------------------------------------------------ ----- \n    [INFO] ----------------------------------------------------------- ----- \n    [INFO] BUILD SUCCESS \n    [INFO] ----------------------------------------------------------- ----- \n    [INFO] Total time: 58.326s \n    [INFO] Finished at: \n    [INFO] Final Memory: 14M/116M \n    [INFO] ----------------------------------------------------------- ----\n\n```", "```scala\nbin/storm jar jarName.jar [TopologyMainClass] [Args] \n```", "```scala\n$> cd $STORM_HOME\n$> bin/storm jar ~/storm_example-0.0.1-SNAPSHOT-jar-with-dependencies.jar com.stormadvance.storm_example.SampleStormClusterTopology storm_example  \n```", "```scala\n702  [main] INFO  o.a.s.StormSubmitter - Generated ZooKeeper secret payload for MD5-digest: -8367952358273199959:-5050558042400210383\n793  [main] INFO  o.a.s.s.a.AuthUtils - Got AutoCreds []\n856  [main] INFO  o.a.s.StormSubmitter - Uploading topology jar /home/USER/storm_example-0.0.1-SNAPSHOT-jar-with-dependencies.jar to assigned location: /tmp/storm-data/nimbus/inbox/stormjar-d3007821-f87d-48af-8364-cff7abf8652d.jar\n867  [main] INFO  o.a.s.StormSubmitter - Successfully uploaded topology jar to assigned location: /tmp/storm-data/nimbus/inbox/stormjar-d3007821-f87d-48af-8364-cff7abf8652d.jar\n868  [main] INFO  o.a.s.StormSubmitter - Submitting topology storm_example in distributed mode with conf {\"storm.zookeeper.topology.auth.scheme\":\"digest\",\"storm.zookeeper.topology.auth.payload\":\"-8367952358273199959:-5050558042400210383\",\"topology.workers\":3}\n 1007 [main] INFO  o.a.s.StormSubmitter - Finished submitting topology: storm_example  \n```", "```scala\njps   \n```", "```scala\n26827 worker \n26530 supervisor \n26824 worker \n26468 nimbus \n26822 worker  \n```", "```scala\n$> bin/storm deactivate topologyName \n```", "```scala\nbin/storm deactivate SampleStormClusterTopology \n```", "```scala\n0 [main] INFO backtype.storm.thrift - Connecting to Nimbus at localhost:6627 \n76 [main] INFO backtype.storm.command.deactivate - Deactivated topology: SampleStormClusterTopology  \n```", "```scala\n$> bin/storm activate topologyName  \n```", "```scala\nbin/storm activate SampleStormClusterTopology\n```", "```scala\n0 [main] INFO backtype.storm.thrift - Connecting to Nimbus at localhost:6627 \n65 [main] INFO backtype.storm.command.activate - Activated topology: SampleStormClusterTopology  \n```", "```scala\n$> bin/storm kill SampleStormClusterTopology  \n```", "```scala\n0 [main] INFO backtype.storm.thrift - Connecting to Nimbus at localhost:6627 \n80 [main] INFO backtype.storm.command.kill-topology - Killed topology: SampleStormClusterTopology\n\n```", "```scala\njps  \n```", "```scala\n26530 supervisor \n27193 Jps \n26468 nimbus  \n```", "```scala\n$> cd $STORM_HOME\n$> bin/storm ui &  \n```", "```scala\n$> cd $STORM_HOME\n$> bin/storm jar ~/storm_example-0.0.1-SNAPSHOT-jar-with-dependencies.jar com.stormadvance.storm_example.SampleStormClusterTopology storm_example  \n```", "```scala\nbin/storm set_log_level [topology name] -l [logger name]=[LEVEL]:[TIMEOUT] \n```", "```scala\n$> bin/storm set_log_level storm_example -l ROOT=DEBUG:30  \n```", "```scala\n$> ./bin/storm set_log_level storm_example -r ROOT \n```"]