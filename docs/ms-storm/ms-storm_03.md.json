["```scala\nConfig conf = new Config(); \nconf.setNumWorkers(3); \n```", "```scala\nbuilder.setSpout(\"SampleSpout\", new SampleSpout(), 2); \n// set the bolt class \nbuilder.setBolt(\"SampleBolt\", new SampleBolt(), 4).shuffleGrouping(\"SampleSpout\"); \n```", "```scala\nbuilder.setSpout(\"SampleSpout\", new SampleSpout(), 2).setNumTasks(4); \n```", "```scala\n> bin/storm rebalance [TopologyName] -n [NumberOfWorkers] -e [Spout]=[NumberOfExecutos] -e [Bolt1]=[NumberOfExecutos] [Bolt2]=[NumberOfExecutos]\n```", "```scala\n> jps\n24347 worker\n23940 supervisor\n24593 Jps\n24349 worker  \n```", "```scala\n> jps\n24344 worker\n23941 supervisor\n24543 Jps\n```", "```scala\n> bin/storm rebalance SampleStormClusterTopology -n 2 -e SampleSpout=4 -e SampleBolt=4\n\n0     [main] INFO  backtype.storm.thrift  - Connecting to Nimbus at nimbus.host.ip:6627\n58   [main] INFO  backtype.storm.command.rebalance  - Topology SampleStormClusterTopology is rebalancing\n```", "```scala\n> jps\n24377 worker\n23940 supervisor\n24593 Jps \n```", "```scala\n> jps\n24353 worker\n23941 supervisor\n24543 Jps  \n```", "```scala\nbuilder.setSpout(\"1\", new TweetSpout()); \nbuilder.setBolt(\"2\", new TweetCounter()).fieldsGrouping(\"1\", new Fields(\"username\")) \n```", "```scala\nbuilder.setSpout(\"1\", new OrderSpout()); \nbuilder.setSpount(\"2\", new ItemScannedSpout()); \nbuilder.setBolt(\"joiner\", new OrderJoiner()) \n.fieldsGrouping(\"1\", new Fields(\"orderId\")) \n.fieldsGrouping(\"2\", new Fields(\"orderRefId\")); \n```", "```scala\npublic class CategoryGrouping implements CustomStreamGrouping, Serializable { \n  private static final Map<String, Integer> categories = ImmutableMap.of \n  ( \n    \"Financial\", 0,  \n    \"Medical\", 1,  \n    \"FMCG\", 2,  \n    \"Electronics\", 3 \n  ); \n\n  private int tasks = 0; \n\n  public void prepare(WorkerTopologyContext context, GlobalStreamId stream, List<Integer> targetTasks)  \n  { \n    tasks = targetTasks.size(); \n  } \n\n  public List<Integer> chooseTasks(int taskId, List<Object> values) { \n    String category = (String) values.get(0); \n    return ImmutableList.of(categories.get(category) % tasks); \n  } \n} \n```", "```scala\n@Override \npublic Map<String, Object> getComponentConfiguration() { \n  Config conf = new Config(); \n  int tickFrequencyInSeconds = 10; \n  conf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, \n  tickFrequencyInSeconds); \n  return conf; \n} \n```", "```scala\n@Override \npublic void execute(Tuple tuple) { \n  if (isTickTuple(tuple)) { \n    // now you can trigger e.g. a periodic activity \n  } \n  else { \n    // do something with the normal tuple \n  } \n} \n\nprivate static boolean isTickTuple(Tuple tuple) { \n  return\n  tuple.getSourceComponent().equals(Constants.SYSTEM_COMPONENT_ID) && tuple.getSourceStreamId().equals(Constants.SYSTEM_TICK_STREAM_ID); \n} \n```"]