["```scala\npublic class FakeTweetSpout implements IBatchSpout{ \n\n   private static final long serialVersionUID = 10L; \n   private intbatchSize; \n   private HashMap<Long, List<List<Object>>>batchesMap = new HashMap<Long, List<List<Object>>>(); \n   public FakeTweetSpout(intbatchSize) { \n         this.batchSize = batchSize; \n   } \n\n   private static final Map<Integer, String> TWEET_MAP = new HashMap<Integer, String>(); \n   static { \n         TWEET_MAP.put(0, \"#FIFA worldcup\"); \n         TWEET_MAP.put(1, \"#FIFA worldcup\"); \n         TWEET_MAP.put(2, \"#FIFA worldcup\"); \n         TWEET_MAP.put(3, \"#FIFA worldcup\"); \n         TWEET_MAP.put(4, \"#Movie top 10\"); \n   } \n\n   private static final Map<Integer, String> COUNTRY_MAP = new HashMap<Integer, String>(); \n   static { \n         COUNTRY_MAP.put(0, \"United State\"); \n         COUNTRY_MAP.put(1, \"Japan\"); \n         COUNTRY_MAP.put(2, \"India\"); \n         COUNTRY_MAP.put(3, \"China\"); \n         COUNTRY_MAP.put(4, \"Brazil\"); \n   } \n\n   private List<Object>recordGenerator() { \n         final Random rand = new Random(); \n         intrandomNumber = rand.nextInt(5); \n         int randomNumber2 = rand.nextInt(5); \n         return new Values(TWEET_MAP.get(randomNumber),COUNTRY_MAP.get(randomNumber2)); \n   } \n\n   public void ack(long batchId) { \n         this.batchesMap.remove(batchId); \n\n   } \n\n   public void close() { \n         // Here we should close all the external connections \n\n   } \n\n   public void emitBatch(long batchId, TridentCollector collector) { \n         List<List<Object>> batches = this.batchesMap.get(batchId); \n         if(batches == null) { \n               batches = new ArrayList<List<Object>>();; \n               for (inti=0;i<this.batchSize;i++) { \n                     batches.add(this.recordGenerator()); \n               } \n               this.batchesMap.put(batchId, batches); \n         } \n         for(List<Object>list : batches){ \ncollector.emit(list); \n        } \n\n   } \n\n   public Map getComponentConfiguration() { \n         // TODO Auto-generated method stub \n         return null; \n   } \n\n   public Fields getOutputFields() { \n         return new Fields(\"text\",\"Country\"); \n   } \n\n   public void open(Map arg0, TopologyContext arg1) { \n         // TODO Auto-generated method stub \n\n   } \n\n} \n```", "```scala\n[\"Adidas #FIFA World Cup Chant Challenge\", \"Brazil\"] \n[\"The Great Gatsby is such a good movie\",\"India\"] \n```", "```scala\n         <dependencies> \n         <dependency> \n               <groupId>junit</groupId> \n               <artifactId>junit</artifactId> \n               <version>3.8.1</version> \n               <scope>test</scope> \n         </dependency> \n         <dependency> \n               <groupId>org.apache.storm</groupId> \n               <artifactId>storm-core</artifactId> \n               <version>1.0.2</version> \n               <scope>provided</scope> \n         </dependency> \n   </dependencies> \n```", "```scala\npublic class TridentUtility { \n   /** \n    * Get the comma separated value as input, split the field by comma, and \n    * then emits multiple tuple as output. \n    *  \n    */ \n   public static class Split extends BaseFunction { \n\n         private static final long serialVersionUID = 2L; \n\n         public void execute(TridentTuple tuple, TridentCollector collector) { \n               String countries = tuple.getString(0); \n               for (String word :countries.split(\",\")) { \n                     // System.out.println(\"word -\"+word); \n                     collector.emit(new Values(word)); \n               } \n         } \n   } \n\n   /** \n    * This class extends BaseFilter and contain isKeep method which emits only \n    * those tuple which has #FIFA in text field. \n    */ \n   public static class TweetFilter extends BaseFilter { \n\n         private static final long serialVersionUID = 1L; \n\n         public booleanisKeep(TridentTuple tuple) { \n               if (tuple.getString(0).contains(\"#FIFA\")) { \n                     return true; \n               } else { \n                     return false; \n               } \n         } \n\n   } \n\n   /** \n    * This class extends BaseFilter and contain isKeep method which will print \n    * the input tuple. \n    *  \n    */ \n   public static class Print extends BaseFilter { \n\n         private static final long serialVersionUID = 1L; \n\n         public booleanisKeep(TridentTuple tuple) { \n               System.out.println(tuple); \n               return true; \n         } \n\n   } \n} \n```", "```scala\npublic class TridentHelloWorldTopology {   \n   public static void main(String[] args) throws Exception { \n         Config conf = new Config(); \n         conf.setMaxSpoutPending(20); \n         if (args.length == 0) { \n               LocalCluster cluster = new LocalCluster(); \n               cluster.submitTopology(\"Count\", conf, buildTopology()); \n         } else { \n               conf.setNumWorkers(3); \n               StormSubmitter.submitTopology(args[0], conf, buildTopology()); \n         } \n   } \n\n   public static StormTopologybuildTopology() { \n\n         FakeTweetSpout spout = new FakeTweetSpout(10); \n         TridentTopology topology = new TridentTopology(); \n\n         topology.newStream(\"spout1\", spout) \n                     .shuffle() \n                     .each(new Fields(\"text\", \"Country\"), \n                                 new TridentUtility.TweetFilter()) \n                     .groupBy(new Fields(\"Country\")) \n                     .aggregate(new Fields(\"Country\"), new Count(), \n                                 new Fields(\"count\")) \n                     .each(new Fields(\"count\"), new TridentUtility.Print()) \n                     .parallelismHint(2); \n\n         return topology.build(); \n   } \n} \n```", "```scala\ndrpc.servers: \n     - \"nimbus-node\" \n```", "```scala\n> bin/storm drpc \n```", "```scala\npublic class DistributedRPC { \n\n  public static void main(String[] args) throws Exception { \n    Config conf = new Config(); \n    conf.setMaxSpoutPending(20); \n    LocalDRPCdrpc = new LocalDRPC(); \n    if (args.length == 0) { \n\n      LocalCluster cluster = new LocalCluster(); \n      cluster.submitTopology(\"CountryCount\", conf, buildTopology(drpc)); \n      Thread.sleep(2000); \n      for(inti=0; i<100 ; i++) { \n        System.out.println(\"Result - \"+drpc.execute(\"Count\", \"Japan India Europe\")); \n        Thread.sleep(1000); \n      } \n    } else { \n      conf.setNumWorkers(3); \n      StormSubmitter.submitTopology(args[0], conf, buildTopology(null)); \n      Thread.sleep(2000); \n      DRPCClient client = new DRPCClient(conf, \"RRPC-Server\", 1234); \n      System.out.println(client.execute(\"Count\", \"Japan India Europe\")); \n    } \n  } \n\n  public static StormTopologybuildTopology(LocalDRPCdrpc) { \n\n    FakeTweetSpout spout = new FakeTweetSpout(10); \n    TridentTopology topology = new TridentTopology(); \n    TridentStatecountryCount = topology.newStream(\"spout1\", spout) \n                     .shuffle() \n                     .each(new Fields(\"text\",\"Country\"), new TridentUtility.TweetFilter()).groupBy(new Fields(\"Country\")) \n                     .persistentAggregate(new MemoryMapState.Factory(),new Fields(\"Country\"), new Count(), new Fields(\"count\")) \n                     .parallelismHint(2); \n\n    try { \n      Thread.sleep(2000); \n    } catch (InterruptedException e) { \n    } \n\n    topology.newDRPCStream(\"Count\", drpc) \n         .each(new Fields(\"args\"), new TridentUtility.Split(), new Fields(\"Country\"))                        \n         .stateQuery(countryCount, new Fields(\"Country\"), new MapGet(), \n                     new Fields(\"count\")).each(new Fields(\"count\"), \n                             new FilterNull()); \n\n    return topology.build(); \n  } \n} \n```", "```scala\npersistentAggregate(new MemoryMapState.Factory(),new Fields(\"Country\"), new Count(), new Fields(\"count\")) \n```", "```scala\nIndia 124 \nUnited State 145 \nJapan 130 \nBrazil 155 \nChina 100 \n```", "```scala\ntopology.newDRPCStream(\"Count\", drpc) \n         .each(new Fields(\"args\"), new TridentUtility.Split(), new Fields(\"Country\"))                        \n         .stateQuery(countryCount, new Fields(\"Country\"), new MapGet(), \n                     new Fields(\"count\")).each(new Fields(\"count\"), \n                             new FilterNull()); \n```", "```scala\nSystem.out.println(drpc.execute(\"Count\", \"Japan,India,Europe\")); \n```", "```scala\nDRPCClient client = new DRPCClient(conf,\"RRPC-Server\", 1234); \nSystem.out.println(client.execute(\"Count\", \"Japan,India,Europe\")); \n```"]