["```scala\n<dependency> \n  <groupId>org.apache.storm</groupId> \n  <artifactId>storm-core</artifactId> \n  <version>1.0.2</version> \n  <scope>provided</scope> \n</dependency> \n\n```", "```scala\npublic class ThriftClient { \n  // IP of the Storm UI node \n  private static final String STORM_UI_NODE = \"127.0.0.1\"; \n  public Client getClient() { \n    // Set the IP and port of thrift server. \n    // By default, the thrift server start on port 6627 \n    TSocket socket = new TSocket(STORM_UI_NODE, 6627); \n    TFramedTransport tFramedTransport = new TFramedTransport(socket); \n    TBinaryProtocol tBinaryProtocol = new TBinaryProtocol(tFramedTransport); \n    Client client = new Client(tBinaryProtocol); \n    try { \n      // Open the connection with thrift client. \n      tFramedTransport.open(); \n    }catch(Exception exception) { \n      throw new RuntimeException(\"Error occurs while making connection with Nimbus thrift server\"); \n    } \n    // return the Nimbus Thrift client. \n    return client;           \n  } \n} \n```", "```scala\npublic class NimbusConfiguration { \n\n  public void printNimbusStats() { \n    try { \n      ThriftClient thriftClient = new ThriftClient(); \n      Client client = thriftClient.getClient(); \n      String nimbusConiguration = client.getNimbusConf(); \n      System.out.println(\"*************************************\"); \n      System.out.println(\"Nimbus Configuration : \"+nimbusConiguration); \n      System.out.println(\"*************************************\"); \n    }catch(Exception exception) { \n      throw new RuntimeException(\"Error occure while fetching the Nimbus statistics : \"); \n    } \n  }\n\n  public static void main(String[] args) { \n    new NimbusConfiguration().printNimbusStats(); \n  }      \n}\n```", "```scala\npublic class SupervisorStatistics { \n\n  public void printSupervisorStatistics()  { \n    try { \n      ThriftClient thriftClient = new ThriftClient(); \n      Client client = thriftClient.getClient(); \n      // Get the cluster information. \n      ClusterSummary clusterSummary = client.getClusterInfo(); \n      // Get the SupervisorSummary iterator \n      Iterator<SupervisorSummary> supervisorsIterator = clusterSummary.get_supervisors_iterator(); \n\n      while (supervisorsIterator.hasNext()) { \n        // Print the information of supervisor node \n        SupervisorSummary supervisorSummary = (SupervisorSummary) supervisorsIterator.next();\n\n        System.out.println(\"*************************************\"); \n        System.out.println(\"Supervisor Host IP : \"+supervisorSummary.get_host()); \n        System.out.println(\"Number of used workers : \"+supervisorSummary.get_num_used_workers()); \n        System.out.println(\"Number of workers : \"+supervisorSummary.get_num_workers()); \n        System.out.println(\"Supervisor ID : \"+supervisorSummary.get_supervisor_id()); \n        System.out.println(\"Supervisor uptime in seconds : \"+supervisorSummary.get_uptime_secs());\n\n        System.out.println(\"*************************************\"); \n      } \n\n    }catch (Exception e) { \n      throw new RuntimeException(\"Error occure while getting cluster info : \"); \n    } \n  } \n\n} \n```", "```scala\npublic class TopologyStatistics { \n\n  public void printTopologyStatistics() { \n    try { \n      ThriftClient thriftClient = new ThriftClient(); \n      // Get the thrift client \n      Client client = thriftClient.getClient(); \n      // Get the cluster info \n      ClusterSummary clusterSummary = client.getClusterInfo(); \n      // Get the iterator over TopologySummary class \n      Iterator<TopologySummary> topologiesIterator = clusterSummary.get_topologies_iterator(); \n      while (topologiesIterator.hasNext()) { \n        TopologySummary topologySummary = topologiesIterator.next();\n\n        System.out.println(\"*************************************\"); \n        System.out.println(\"ID of topology: \" + topologySummary.get_id()); \n        System.out.println(\"Name of topology: \" + topologySummary.get_name()); \n        System.out.println(\"Number of Executors: \" + topologySummary.get_num_executors()); \n        System.out.println(\"Number of Tasks: \" + topologySummary.get_num_tasks()); \n        System.out.println(\"Number of Workers: \" + topologySummary.get_num_workers()); \n        System.out.println(\"Status of toplogy: \" + topologySummary.get_status()); \n        System.out.println(\"Topology uptime in seconds: \" + topologySummary.get_uptime_secs());\n\n        System.out.println(\"*************************************\"); \n      } \n    }catch (Exception exception) { \n      throw new RuntimeException(\"Error occure while fetching the topolgies  information\"); \n    } \n  }      \n} \n```", "```scala\npublic class SpoutStatistics { \n\n  private static final String DEFAULT = \"default\"; \n  private static final String ALL_TIME = \":all-time\"; \n\n  public void printSpoutStatistics(String topologyId) { \n    try { \n      ThriftClient thriftClient = new ThriftClient(); \n      // Get the nimbus thrift client \n      Client client = thriftClient.getClient(); \n      // Get the information of given topology  \n      TopologyInfo topologyInfo = client.getTopologyInfo(topologyId);          \n      Iterator<ExecutorSummary> executorSummaryIterator = topologyInfo.get_executors_iterator(); \n      while (executorSummaryIterator.hasNext()) { \n        ExecutorSummary executorSummary = executorSummaryIterator.next(); \n        ExecutorStats executorStats = executorSummary.get_stats(); \n        if(executorStats !=null) { \n          ExecutorSpecificStats executorSpecificStats = executorStats.get_specific(); \n          String componentId = executorSummary.get_component_id(); \n          //  \n          if (executorSpecificStats.is_set_spout()) { \n            SpoutStats spoutStats = executorSpecificStats.get_spout();\n\n             System.out.println(\"*************************************\"); \n            System.out.println(\"Component ID of Spout:- \" + componentId); \n            System.out.println(\"Transferred:- \" + getAllTimeStat(executorStats.get_transferred(),ALL_TIME)); \n            System.out.println(\"Total tuples emitted:- \" + getAllTimeStat(executorStats.get_emitted(), ALL_TIME)); \n            System.out.println(\"Acked: \" + getAllTimeStat(spoutStats.get_acked(), ALL_TIME)); \n            System.out.println(\"Failed: \" + getAllTimeStat(spoutStats.get_failed(), ALL_TIME));\n             System.out.println(\"*************************************\"); \n          } \n        } \n      } \n    }catch (Exception exception) { \n      throw new RuntimeException(\"Error occure while fetching the spout information : \"+exception); \n    } \n  } \n\n  private static Long getAllTimeStat(Map<String, Map<String, Long>> map, String statName) { \n    if (map != null) { \n      Long statValue = null; \n      Map<String, Long> tempMap = map.get(statName); \n      statValue = tempMap.get(DEFAULT); \n      return statValue; \n    } \n    return 0L; \n  } \n\n  public static void main(String[] args) { \n    new SpoutStatistics().printSpoutStatistics(\"StormClusterTopology-1-1393847956\"); \n  } \n}      \n```", "```scala\npublic class BoltStatistics { \n\n  private static final String DEFAULT = \"default\"; \n  private static final String ALL_TIME = \":all-time\"; \n\n  public void printBoltStatistics(String topologyId) { \n\n    try { \n      ThriftClient thriftClient = new ThriftClient(); \n      // Get the Nimbus thrift server client \n      Client client = thriftClient.getClient(); \n\n      // Get the information of given topology \n      TopologyInfo topologyInfo = client.getTopologyInfo(topologyId); \n      Iterator<ExecutorSummary> executorSummaryIterator = topologyInfo.get_executors_iterator(); \n      while (executorSummaryIterator.hasNext()) { \n        // get the executor \n        ExecutorSummary executorSummary = executorSummaryIterator.next(); \n        ExecutorStats executorStats = executorSummary.get_stats(); \n        if (executorStats != null) { \n          ExecutorSpecificStats executorSpecificStats = executorStats.get_specific(); \n          String componentId = executorSummary.get_component_id(); \n          if (executorSpecificStats.is_set_bolt()) { \n            BoltStats boltStats = executorSpecificStats.get_bolt();\n\n            System.out.println(\"*************************************\"); \n            System.out.println(\"Component ID of Bolt \" + componentId); \n            System.out.println(\"Transferred: \" + getAllTimeStat(executorStats.get_transferred(), ALL_TIME)); \n            System.out.println(\"Emitted: \" + getAllTimeStat(executorStats.get_emitted(), ALL_TIME)); \n            System.out.println(\"Acked: \" + getBoltStats(boltStats.get_acked(), ALL_TIME)); \n            System.out.println(\"Failed: \" + getBoltStats(boltStats.get_failed(), ALL_TIME)); \n            System.out.println(\"Executed : \" + getBoltStats(boltStats.get_executed(), ALL_TIME));\n            System.out.println(\"*************************************\"); \n          } \n        } \n      } \n    } catch (Exception exception) { \n      throw new RuntimeException(\"Error occure while fetching the bolt information :\"+exception); \n    } \n  } \n\n  private static Long getAllTimeStat(Map<String, Map<String, Long>> map, String statName) { \n    if (map != null) { \n      Long statValue = null; \n      Map<String, Long> tempMap = map.get(statName); \n      statValue = tempMap.get(DEFAULT); \n      return statValue; \n    } \n    return 0L; \n  } \n\n  public static Long getBoltStats(Map<String, Map<GlobalStreamId, Long>> map, String statName) { \n    if (map != null) { \n      Long statValue = null; \n      Map<GlobalStreamId, Long> tempMap = map.get(statName); \n      Set<GlobalStreamId> key = tempMap.keySet(); \n      if (key.size() > 0) { \n        Iterator<GlobalStreamId> iterator = key.iterator(); \n        statValue = tempMap.get(iterator.next()); \n      } \n      return statValue; \n    } \n    return 0L; \n  }\n```", "```scala\n\n  public static void main(String[] args) { new BoltStatistics().printBoltStatistics(\"StormClusterTopology-1-1393847956\"); \n}  \n```", "```scala\npublic void kill(String topologyId) { \n  try { \n    ThriftClient thriftClient = new ThriftClient(); \n    // Get the Nimbus thrift client \n    Client client = thriftClient.getClient(); \n    // kill the given topology \n    client.killTopology(topologyId); \n\n  }catch (Exception exception) { \n    throw new RuntimeException(\"Error occure while fetching the spout information : \"+exception); \n  } \n} \n\npublic static void main(String[] args) { \n  new killTopology().kill(\"topologyId\"); \n} \n```", "```scala\nsupervisor.childopts: -verbose:gc -XX:+PrintGCTimeStamps - XX:+PrintGCDetails -Dcom.sun.management.jmxremote - Dcom.sun.management.jmxremote.ssl=false - Dcom.sun.management.jmxremote.authenticate=false - Dcom.sun.management.jmxremote.port=12346   \n```", "```scala\nnimbus.childopts: -verbose:gc -XX:+PrintGCTimeStamps - XX:+PrintGCDetails -Dcom.sun.management.jmxremote - Dcom.sun.management.jmxremote.ssl=false - Dcom.sun.management.jmxremote.authenticate=false - Dcom.sun.management.jmxremote.port=12345\n```", "```scala\nworker.childopts: -verbose:gc -XX:+PrintGCTimeStamps - XX:+PrintGCDetails -Dcom.sun.management.jmxremote - Dcom.sun.management.jmxremote.ssl=false - Dcom.sun.management.jmxremote.authenticate=false - Dcom.sun.management.jmxremote.port=2%ID%   \n```", "```scala\ncd $JAVA_HOME ./bin/jconsole\n```", "```scala\nwget https://jmxtrans.googlecode.com/files/jmxtrans-239-0.noarch. rpm sudo rpm -i jmxtrans-239-0.noarch.rpm\n```", "```scala\nsudo yum -q -y install rrdtool sudo yum -q -y install ganglia-gmond sudo yum -q -y install ganglia-gmetad sudo yum -q -y install ganglia-web\n```", "```scala\ndata_source \"stormcluster\" 127.0.0.1\n```", "```scala\ncluster { \n  name = \"stormcluster\" \n  owner = \"clusterOwner\" \n  latlong = \"unspecified\" \n  url = \"unspecified\" \n  }\n  host { \n    location = \"unspecified\" \n  }\n  udp_send_channel { \n    host = 127.0.0.1 \n    port = 8649 \n    ttl = 1 \n  }\n  udp_recv_channel { \n    port = 8649 \n  }\n```", "```scala\nAlias /ganglia /usr/share/ganglia <Location /ganglia>Allow from all</Location>\n```", "```scala\nsudo service gmond start setsebool -P httpd_can_network_connect 1 sudo service gmetad start sudo service httpd stop sudo service httpd start\n```", "```scala\n{ \n  \"servers\" : [ { \n    \"port\" : \"12346\", \n    \"host\" : \"IP_OF_SUPERVISOR_MACHINE\", \n    \"queries\" : [ { \n      \"outputWriters\": [{ \n        \"@class\": \n        \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\": { \n          \"groupName\": \"supervisor\", \n          \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n          \"port\": \"8649\" } \n      }], \n      \"obj\": \"java.lang:type=Memory\", \n      \"resultAlias\": \"supervisor\", \n      \"attr\": [\"ObjectPendingFinalizationCount\"] \n    }, \n    { \n      \"outputWriters\": [{ \n        \"@class\": \n        \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\" { \n          \"groupName\": \" supervisor \", \n          \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n          \"port\": \"8649\" \n        } \n      }], \n      \"obj\": \"java.lang:name=Copy,type=GarbageCollector\", \n      \"resultAlias\": \" supervisor \", \n      \"attr\": [ \n        \"CollectionCount\", \n        \"CollectionTime\"  \n      ] \n    }, \n    { \n      \"outputWriters\": [{ \n        \"@class\": \n        \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\": { \n          \"groupName\": \"supervisor \", \n          \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n          \"port\": \"8649\" \n        } \n      }], \n      \"obj\": \"java.lang:name=Code Cache,type=MemoryPool\", \n      \"resultAlias\": \"supervisor \", \n      \"attr\": [ \n        \"CollectionUsageThreshold\", \n        \"CollectionUsageThresholdCount\", \n        \"UsageThreshold\", \n        \"UsageThresholdCount\" \n      ] \n    }, \n    { \n      \"outputWriters\": [{ \n        \"@class\": \n        \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\": { \n          \"groupName\": \"supervisor \", \n          \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n          \"port\": \"8649\" \n        } \n      }], \n      \"obj\": \"java.lang:type=Runtime\", \n      \"resultAlias\": \"supervisor\", \n      \"attr\": [ \n        \"StartTime\", \n        \"Uptime\" \n      ] \n    }\n    ], \n    \"numQueryThreads\" : 2 \n  }] \n} \n```", "```scala\n{ \n  \"servers\" : [{ \n    \"port\" : \"12345\", \n    \"host\" : \"IP_OF_NIMBUS_MACHINE\", \n    \"queries\" : [ \n      { \"outputWriters\": [{ \n        \"@class\": \n        \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \n        \"settings\": { \n          \"groupName\": \"nimbus\", \n          \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n          \"port\": \"8649\" \n        } \n      }], \n      \"obj\": \"java.lang:type=Memory\", \n      \"resultAlias\": \"nimbus\", \n      \"attr\": [\"ObjectPendingFinalizationCount\"] \n      }, \n      { \n        \"outputWriters\": [{ \n          \"@class\": \n          \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\": { \n            \"groupName\": \"nimbus\", \n            \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n            \"port\": \"8649\" \n          } \n        }], \n        \"obj\": \"java.lang:name=Copy,type=GarbageCollector\", \n        \"resultAlias\": \"nimbus\", \n        \"attr\": [ \n          \"CollectionCount\", \n          \"CollectionTime\" \n        ] \n      }, \n      { \n        \"outputWriters\": [{ \n          \"@class\": \n          \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \n          \"settings\": { \n            \"groupName\": \"nimbus\", \n            \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n            \"port\": \"8649\" \n          } \n        }], \n        \"obj\": \"java.lang:name=Code Cache,type=MemoryPool\", \n        \"resultAlias\": \"nimbus\", \n        \"attr\": [ \n          \"CollectionUsageThreshold\", \n          \"CollectionUsageThresholdCount\", \n          \"UsageThreshold\", \n          \"UsageThresholdCount\" \n        ] \n      }, \n      { \n        \"outputWriters\": [{ \n          \"@class\": \n          \"com.googlecode.jmxtrans.model.output.GangliaWriter\", \"settings\": {    \n           \"groupName\": \"nimbus\", \n            \"host\": \"IP_OF_GANGLIA_GMOND_SERVER\", \n            \"port\": \"8649\" \n          } \n        }], \n        \"obj\": \"java.lang:type=Runtime\",\n        \"resultAlias\": \"nimbus\", \n        \"attr\": [ \n          \"StartTime\", \n          \"Uptime\" \n        ] \n      }\n    ] \n    \"numQueryThreads\" : 2 \n  } ] \n} \n```", "```scala\ncd /usr/share/jmxtrans/ sudo ./jmxtrans.sh start PATH_OF_JSON_FILES\n```"]