["```java\n    class KafkaStream[K,V](private val queue: \n                          BlockingQueue[FetchedDataChunk],\n                          consumerTimeoutMs: Int,\n                          private val keyDecoder: Decoder[K],\n                          private val valueDecoder: Decoder[V],\n                          val clientId: String)\n    ```", "```java\nimport kafka.consumer.ConsumerConfig;\nimport kafka.consumer.ConsumerIterator;\nimport kafka.consumer.KafkaStream;\nimport kafka.javaapi.consumer.ConsumerConnector;\n```", "```java\nProperties props = new Properties();\nprops.put(\"zookeeper.connect\", \"localhost:2181\");\nprops.put(\"group.id\", \"testgroup\");\nprops.put(\"zookeeper.session.timeout.ms\", \"500\");\nprops.put(\"zookeeper.sync.time.ms\", \"250\");\nprops.put(\"auto.commit.interval.ms\", \"1000\");\nnew ConsumerConfig(props);\n```", "```java\nMap<String, Integer> topicMap = new HashMap<String, Integer>();\n// 1 represents the single thread\ntopicCount.put(topic, new Integer(1));\n\nMap<String, List<KafkaStream<byte[], byte[]>>> consumerStreamsMap = consumer.createMessageStreams(topicMap);\n\n// Get the list of message streams for each topic, using the default decoder.\nList<KafkaStream<byte[], byte[]>>streamList =  consumerStreamsMap.get(topic);\n\nfor (final KafkaStream <byte[], byte[]> stream : streamList) {\nConsumerIterator<byte[], byte[]> consumerIte = stream.iterator();\n  while (consumerIte.hasNext())\n    System.out.println(\"Message from Single Topic :: \"\n    + new String(consumerIte.next().message()));\n} \n```", "```java\npackage kafka.examples.ch5;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\nimport kafka.consumer.ConsumerConfig;\nimport kafka.consumer.ConsumerIterator;\nimport kafka.consumer.KafkaStream;\nimport kafka.javaapi.consumer.ConsumerConnector;\n\npublic class SimpleHLConsumer {\n  private final ConsumerConnector consumer;\n  private final String topic;\n\n  public SimpleHLConsumer(String zookeeper, String groupId, String topic) {\n    consumer = kafka.consumer.Consumer\n        .createJavaConsumerConnector(createConsumerConfig(zookeeper,\n            groupId));\n    this.topic = topic;\n  }\n\n  private static ConsumerConfig createConsumerConfig(String zookeeper,\n        String groupId) {\n    Properties props = new Properties();\n    props.put(\"zookeeper.connect\", zookeeper);\n    props.put(\"group.id\", groupId);\n    props.put(\"zookeeper.session.timeout.ms\", \"500\");\n    props.put(\"zookeeper.sync.time.ms\", \"250\");\n    props.put(\"auto.commit.interval.ms\", \"1000\");\n\n    return new ConsumerConfig(props);\n\n  }\n\n  public void testConsumer() {\n\n    Map<String, Integer> topicMap = new HashMap<String, Integer>();\n\n    // Define single thread for topic\n    topicMap.put(topic, new Integer(1));\n\n    Map<String, List<KafkaStream<byte[], byte[]>>> consumerStreamsMap = \n        consumer.createMessageStreams(topicMap);\n\n    List<KafkaStream<byte[], byte[]>> streamList = consumerStreamsMap\n        .get(topic);\n\n    for (final KafkaStream<byte[], byte[]> stream : streamList) {\n      ConsumerIterator<byte[], byte[]> consumerIte = stream.iterator();\n      while (consumerIte.hasNext())\n        System.out.println(\"Message from Single Topic :: \"\n          + new String(consumerIte.next().message()));\n    }\n    if (consumer != null)\n      consumer.shutdown();\n  }\n\n  public static void main(String[] args) {\n\n    String zooKeeper = args[0];\n    String groupId = args[1];\n    String topic = args[2];\n    SimpleHLConsumer simpleHLConsumer = new SimpleHLConsumer(\n          zooKeeper, groupId, topic);\n    simpleHLConsumer.testConsumer();\n  }\n\n}\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]#bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic kafkatopic\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# export KAFKA_LIB=/opt/kafka_2.9.2-0.8.1.1/libs\n[root@localhost kafka_2.9.2-0.8.1.1]# export CLASSPATH=.:$KAFKA_LIB/jopt-simple-3.2.jar:$KAFKA_LIB/kafka_2.9.2-0.8.1.1.jar:$KAFKA_LIB/log4j-1.2.15.jar:$KAFKA_LIB/metrics-core-2.2.0.jar:$KAFKA_LIB/scala-library-2.9.2.jar:$KAFKA_LIB/slf4j-api-1.7.2.jar:$KAFKA_LIB/slf4j-log4j12-1.7.7.jar:$KAFKA_LIB/snappy-java-1.0.5.jar:$KAFKA_LIB/zkclient-0.3.jar:$KAFKA_LIB/zookeeper-3.3.4.jar\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# java kafka.examples.ch4.SimpleProducer kafkatopic 100\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# javac -d . kafka/examples/ch5/SimpleHLConsumer.java\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# java kafka.examples.ch5.SimpleHLConsumer localhost:2181 testgroup kafkatopic\n\n```", "```java\nimport kafka.consumer.ConsumerConfig;\nimport kafka.consumer.ConsumerIterator;\nimport kafka.consumer.KafkaStream;\nimport kafka.javaapi.consumer.ConsumerConnector;\n```", "```java\nProperties props = new Properties();\nprops.put(\"zookeeper.connect\", \"localhost:2181\");\nprops.put(\"group.id\", \"testgroup\");\nprops.put(\"zookeeper.session.timeout.ms\", \"500\");\nprops.put(\"zookeeper.sync.time.ms\", \"250\");\nprops.put(\"auto.commit.interval.ms\", \"1000\");\nnew ConsumerConfig(props);\n```", "```java\n// Define thread count for each topic\ntopicMap.put(topic, new Integer(threadCount));\n\n// Here we have used a single topic but we can also add\n// multiple topics to topicCount MAP\nMap<String, List<KafkaStream<byte[], byte[]>>> consumerStreamsMap \n           = consumer.createMessageStreams(topicMap);\n\nList<KafkaStream<byte[], byte[]>> streamList = consumerStreamsMap.get(topic);\n\n// Launching the thread pool\nexecutor = Executors.newFixedThreadPool(threadCount);\n```", "```java\npackage kafka.examples.ch5;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nimport kafka.consumer.ConsumerConfig;\nimport kafka.consumer.ConsumerIterator;\nimport kafka.consumer.KafkaStream;\nimport kafka.javaapi.consumer.ConsumerConnector;\n\npublic class MultiThreadHLConsumer {\n\n  private ExecutorService executor;\n  private final ConsumerConnector consumer;\n  private final String topic;\n\n  public MultiThreadHLConsumer(String zookeeper, String groupId, String topic) {\n    consumer = kafka.consumer.Consumer\n        .createJavaConsumerConnector(createConsumerConfig(zookeeper, groupId));\n    this.topic = topic;\n  }\n\n  private static ConsumerConfig createConsumerConfig(String zookeeper,\n        String groupId) {\n    Properties props = new Properties();\n    props.put(\"zookeeper.connect\", zookeeper);\n    props.put(\"group.id\", groupId);\n    props.put(\"zookeeper.session.timeout.ms\", \"500\");\n    props.put(\"zookeeper.sync.time.ms\", \"250\");\n    props.put(\"auto.commit.interval.ms\", \"1000\");\n\n    return new ConsumerConfig(props);\n\n  }\n\n  public void shutdown() {\n    if (consumer != null)\n      consumer.shutdown();\n    if (executor != null)\n      executor.shutdown();\n  }\n\n  public void testMultiThreadConsumer(int threadCount) {\n\n    Map<String, Integer> topicMap = new HashMap<String, Integer>();\n\n    // Define thread count for each topic\n    topicMap.put(topic, new Integer(threadCount));\n\n    // Here we have used a single topic but we can also add\n    // multiple topics to topicCount MAP\n    Map<String, List<KafkaStream<byte[], byte[]>>> consumerStreamsMap = \n        consumer.createMessageStreams(topicMap);\n\n    List<KafkaStream<byte[], byte[]>> streamList = consumerStreamsMap\n        .get(topic);\n\n    // Launching the thread pool\n    executor = Executors.newFixedThreadPool(threadCount);\n\n    // Creating an object messages consumption\n    int count = 0;\n    for (final KafkaStream<byte[], byte[]> stream : streamList) {\n      final int threadNumber = count;\n      executor.submit(new Runnable() {\n      public void run() {\n      ConsumerIterator<byte[], byte[]> consumerIte = stream.iterator();\n      while (consumerIte.hasNext())\n        System.out.println(\"Thread Number \" + threadNumber + \": \"\n        + new String(consumerIte.next().message()));\n        System.out.println(\"Shutting down Thread Number: \" + \n        threadNumber);\n        }\n      });\n      count++;\n    }\n    if (consumer != null)\n      consumer.shutdown();\n    if (executor != null)\n      executor.shutdown();\n  }\n\n  public static void main(String[] args) {\n\n    String zooKeeper = args[0];\n    String groupId = args[1];\n    String topic = args[2];\n    int threadCount = Integer.parseInt(args[3]);\n    MultiThreadHLConsumer multiThreadHLConsumer = \n        new MultiThreadHLConsumer(zooKeeper, groupId, topic);\n    multiThreadHLConsumer.testMultiThreadConsumer(threadCount);\n    try {\n      Thread.sleep(10000);\n    } catch (InterruptedException ie) {\n\n    }\n    multiThreadHLConsumer.shutdown();\n\n  }\n}\n```", "```java\n[root@localhost kafka-0.8]# bin/kafka-topics.sh --zookeeper localhost:2181 --create --topic kafkatopic --partitions 4 --replication-factor 2\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# java kafka.examples.ch4.SimpleProducer kafkatopic 100\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# javac -d . kafka/examples/ch5/MultiThreadHLConsumer.java\n\n```", "```java\n[root@localhost kafka_2.9.2-0.8.1.1]# java kafka.examples.ch5.MultiThreadHLConsumer localhost:2181 testgroup kafkatopic 4\n\n```"]