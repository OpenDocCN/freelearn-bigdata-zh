["```java\npublic ZkHosts(String brokerZkStr, String brokerZkPath) \npublic ZkHosts(String brokerZkStr)\n```", "```java\n//localhost:9092\\. Uses default port as 9092.\nBroker brokerPartition0 = new Broker(\"localhost\");\n\n//localhost:9092\\. Takes the port explicitly\nBroker brokerPartition1 = new Broker(\"localhost\", 9092);    \n\n//localhost:9092 specified as one string.\nBroker brokerPartition2 = new Broker(\"localhost:9092\");    \n\nGlobalPartitionInformation partitionInfo = new GlobalPartitionInformation();\n\n//mapping form partition 0 to brokerPartition0\npartitionInfo.addPartition(0, brokerPartition0);\n\n//mapping form partition 1 to brokerPartition1\npartitionInfo.addPartition(1, brokerPartition1);    \n\n//mapping form partition 2 to brokerPartition2\npartitionInfo.addPartition(2, brokerPartition2);\n\nStaticHosts hosts = new StaticHosts(partitionInfo);\n```", "```java\npublic KafkaConfig(BrokerHosts hosts, String topic)\npublic KafkaConfig(BrokerHosts hosts, String topic, String clientId)\n```", "```java\n  public int fetchSizeBytes = 1024 * 1024;\n  public int socketTimeoutMs = 10000;\n  public int fetchMaxWait = 10000;\n  public int bufferSizeBytes = 1024 * 1024;\n  public MultiScheme scheme = new RawMultiScheme();\n  public boolean forceFromStart = false;\n  public long startOffsetTime = \n        kafka.api.OffsetRequest.EarliestTime();\n  public long maxOffsetBehind = Long.MAX_VALUE;\n  public boolean useStartOffsetTimeIfOffsetOutOfRange = true;\n  public int metricsTimeBucketSizeInSecs = 60;\n```", "```java\npublic SpoutConfig(BrokerHosts hosts, String topic, String zkRoot, String id);\n```", "```java\n// Creating instance for BrokerHosts interface implementation\nBrokerHosts hosts = new ZkHosts(brokerZkConnString);\n\n// Creating instance of SpoutConfig\nSpoutConfig spoutConfig = new SpoutConfig(brokerHosts, topicName, \"/\" + topicName, UUID.randomUUID().toString());\n\n// Defines how the byte[] consumed from kafka gets transformed into // a storm tuple\nspoutConfig.scheme = new SchemeAsMultiScheme(new StringScheme());\n\n// Creating instance of KafkaSpout\nKafkaSpout kafkaSpout = new KafkaSpout(spoutConfig);\n```", "```java\nspoutConfig.forceStartOffsetTime(TIMESTAMP);\n```", "```java\n     # Assuming your installation directory is /opt/Hadoop-2.6.0\n     [root@localhost opt]#export HADOOP_HOME=/opt/hadoop-2.6.0\n     [root@localhost opt]#export PATH=$PATH:$HADOOP_HOME/bin\n    ```", "```java\n    etc/hadoop/core-site.xml:\n    <configuration>\n        <property>\n            <name>fs.defaultFS</name>\n            <value>hdfs://localhost:9000</value>\n        </property>\n    </configuration>\n\n     etc/hadoop/hdfs-site.xml:\n    <configuration>\n        <property>\n            <name>dfs.replication</name>\n            <value>1</value>\n        </property>\n    </configuration>\n    ```", "```java\n    [root@localhost opt]# ssh localhost\n    ```", "```java\n    [root@localhost opt]# ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa [root@localhost opt]# cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys\n\n    ```", "```java\n    [root@localhost opt]# bin/hdfs namenode -format\n\n    ```", "```java\n    [root@localhost opt]# sbin/start-dfs.sh\n\n    ```", "```java\nkafka://<kafka-broker>/<kafka-topic>\n```", "```java\n        REGISTER hadoop-producer_2.8.0-0.8.0.jar;\n        REGISTER avro-1.4.0.jar;\n        REGISTER piggybank.jar;\n        REGISTER kafka-0.8.0.jar;\n        REGISTER jackson-core-asl-1.5.5.jar;\n        REGISTER jackson-mapper-asl-1.5.5.jar;\n        REGISTER scala-library.jar;\n\n    member_info = LOAD 'member_info.tsv' AS (member_id : int, name : chararray);\n\n    names = FOREACH member_info GENERATE name;\n\n    STORE member_info INTO 'kafka://localhost:9092/member_info' USING kafka.bridge.AvroKafkaStorage('\"string\"');\n    ```"]