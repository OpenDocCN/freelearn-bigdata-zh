["```scala\nscala> finalDayDf1.show(5)\n```", "```scala\nscala> val tickerTsrdd = TimeSeriesRDD.timeSeriesRDDFromObservations(dtIndex, tickerObs, \"timestamp\", \"ticker\", \"close\") \n```", "```scala\nscala> import org.apache.spark.ml.Pipeline\nscala> import org.apache.spark.ml.classification.{RandomForestClassificationModel, RandomForestClassifier}\nscala> import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\nscala> import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer} \nscala> import org.apache.spark.ml.linalg.Vectors \n```", "```scala\nscala> val rf = new RandomForestClassifier().setLabelCol(\"indexedLabel\").setFeaturesCol(\"indexedFeatures\").setNumTrees(10)\n\nscala> // Convert indexed labels back to original labels.\nscala> val labelConverter = new IndexToString().setInputCol(\"prediction\").setOutputCol(\"predictedLabel\").setLabels(labelIndexer.labels)\n\nscala> // Chain indexers and forest in a Pipeline.\nscala> val pipeline = new Pipeline().setStages(Array(labelIndexer, featureIndexer, rf, labelConverter))\n\nscala> // Train model. This also runs the indexers.\nscala> val model = pipeline.fit(trainingData)\n\nscala> // Make predictions.\nscala> val predictions = model.transform(testData)\n\nscala> // Select example rows to display.\nscala> predictions.select(\"predictedLabel\", \"label\", \"features\").show(5)\n```", "```scala\nscala> // Select (prediction, true label) and compute test error.\nscala> val evaluator = new MulticlassClassificationEvaluator().setLabelCol(\"indexedLabel\").setPredictionCol(\"prediction\").setMetricName(\"accuracy\")\n\nscala> val accuracy = evaluator.evaluate(predictions)\naccuracy: Double = 0.5341463414634147                                          \n\nscala> println(\"Test Error = \" + (1.0 - accuracy))\nTest Error = 0.46585365853658534\n\nscala> val rfModel = model.stages(2).asInstanceOf[RandomForestClassificationModel]\n\nscala> println(\"Learned classification forest model:\\n\" + rfModel.toDebugString)\n```"]