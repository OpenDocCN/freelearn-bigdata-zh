["```scala\nAurobindos-MacBook-Pro-2:spark-2.2.0-bin-hadoop2.7 aurobindosarkar$./bin/SparkR\n```", "```scala\n> install.packages('ggplot2', dep = TRUE)\n```", "```scala\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/bank-additional/bank-additional-full.csv\"\n\n> df <- read.df(csvPath, \"csv\", header = \"true\", inferSchema = \"true\", na.strings = \"NA\", delimiter= \";\")\n```", "```scala\nwrite.df(df, path = \"hdfs://localhost:9000/Users/aurobindosarkar/Downloads/df.parquet\", source = \"parquet\", mode = \"overwrite\")\n```", "```scala\n> persist(df, \"MEMORY_ONLY\")\n```", "```scala\n> df\n```", "```scala\n> printSchema(df)\n```", "```scala\n> names(df)\n```", "```scala\n> str(df)\n```", "```scala\n> head(df, 2)\n```", "```scala\n> dim(df)\n[1] 41188 21\n```", "```scala\n> count(df)\n[1] 41188\n\n> nrow(df)\n[1] 41188\n```", "```scala\n> count(distinct(select(df, df$age)))\n[1] 78\n```", "```scala\n> head(select(df, df$education))\neducation\n1 basic.4y\n2 high.school\n3 high.school\n4 basic.6y\n5 high.school\n6 basic.9y\n```", "```scala\n> head(select(df, \"education\"))\n```", "```scala\n> subsetMarried <- subset(df, df$marital == \"married\")\n\n> head(subsetMarried, 2)\n```", "```scala\n> head(filter(df, df$education == \"basic.4y\"), 2)\n```", "```scala\n> maritaldf <- agg(groupBy(df, df$marital), count = n(df$marital))\n```", "```scala\n> head(maritaldf)\nmarital count\n1 unknown 80\n2 divorced 4612\n3 married 24928\n4 single 11568\n```", "```scala\n> maritalCounts <- summarize(groupBy(df, df$marital), count = n(df$marital))\n\n> nMarriedCategories <- count(maritalCounts)\n\n> head(arrange(maritalCounts, desc(maritalCounts$count)), num = nMarriedCategories)\nmarital count\n1 married 24928\n2 single 11568\n3 divorced 4612\n4 unknown 80\n```", "```scala\n> install.packages(\"magrittr\")\n```", "```scala\n> library(magrittr)\n```", "```scala\n> educationdf <- filter(df, df$education == \"basic.4y\") %>% groupBy(df$marital) %>% summarize(count = n(df$marital))\n\n> head(educationdf)\n```", "```scala\n> collect(summarize(df,avg_age = mean(df$age)))\navg_age\n1 40.02406\n```", "```scala\n> ls1df <- collect(sample(df, FALSE, 0.1, 11L))\n> nrow(df)\n[1] 41188\n> nrow(ls1df)\n[1] 4157\n```", "```scala\n> df$durationMins <- round(df$duration / 60)\n\n> head(df, 2)\n```", "```scala\n> createOrReplaceTempView(df, \"customer\")\n```", "```scala\n> sqldf <- sql(\"SELECT education, age, marital, housing, loan FROM customer WHERE age >= 13 AND age <= 19\")\n\n> head(sqldf)\n```", "```scala\n> library(magrittr)\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/CommViolPredUnnormalizedData.csv\"\n> df <- read.df(csvPath, \"csv\", header = \"false\", inferSchema = \"false\", na.strings = \"NA\", delimiter= \",\")\n```", "```scala\n> crimesStatesSubset = subset(df, select = c(1,2, 130, 132, 134, 136, 138, 140, 142, 144))\n```", "```scala\n> head(crimesStatesdf, 2)\n```", "```scala\n> state_names <- read.df(\"file:///Users/aurobindosarkar/downloads/csv_hus/states.csv\", \"csv\", header = \"true\", inferSchema = \"true\", na.strings = \"NA\", delimiter= \",\")\n```", "```scala\n> names(crimesStatesdf)\n[1] \"comm\" \"code\" \"nmurders\" \"nrapes\" \"nrobberies\"\n[6] \"nassaults\" \"nburglaries\" \"nlarcenies\" \"nautothefts\" \"narsons\"\n\n> names(state_names)\n[1] \"st\" \"name\" \"code\"\n```", "```scala\n> m1df <- merge(crimesStatesdf, state_names)\n> head(m1df, 2)\n```", "```scala\n> m2df <- merge(crimesStatesdf, state_names, by = \"code\")\n> head(m2df, 2)\n```", "```scala\n> df1 <- select(df, df$duration)\n\n> schema <- structType(structField(\"duration\", \"integer\"),\n+ structField(\"durMins\", \"double\"))\n\n> df2 <- dapply(df1, function(x) { x <- cbind(x, x$duration / 60) }, schema)\n> head(collect(df2))\n```", "```scala\n> df1 <- select(df, df$duration, df$age)\n\n> schema <- structType(structField(\"age\", \"integer\"), structField(\"maxDuration\", \"integer\"))\n\n> result <- gapply(\n+ df1,\n+ \"age\",\n+ function(key, x) {\n+ y <- data.frame(key, max(x$duration))\n+ },\n+ schema)\n> head(collect(arrange(result, \"maxDuration\", decreasing = TRUE)))\n```", "```scala\n> sumstatsdf <- describe(df, \"duration\", \"campaign\", \"previous\", \"age\")\n\n> showDF(sumstatsdf)\n```", "```scala\n> avgagedf <- agg(df, mean = mean(df$age))\n\n> showDF(avgagedf) # Print this DF\n+-----------------+\n| mean            |\n+-----------------+\n|40.02406040594348|\n+-----------------+\n```", "```scala\n> agerangedf <- agg(df, minimum = min(df$age), maximum = max(df$age), range_width = abs(max(df$age) - min(df$age)))\n\n> showDF(agerangedf)\n```", "```scala\n> agevardf <- agg(df, variance = var(df$age))\n\n> showDF(agevardf)\n+------------------+\n| variance         |\n+------------------+\n|108.60245116511807|\n+------------------+\n\n> agesddf <- agg(df, std_dev = sd(df$age))\n\n> showDF(agesddf)\n+------------------+\n| std_dev          |\n+------------------+\n|10.421249980934057|\n+------------------+\n```", "```scala\n> df1 <- dropna(df, cols = \"age\")\n\n> quartilesdf <- approxQuantile(x = df1, col = \"age\", probabilities = c(0.25, 0.5, 0.75), relativeError = 0.001)\n\n> quartilesdf\n[[1]]\n[1] 32\n[[2]]\n[1] 38\n[[3]]\n[1] 47\n```", "```scala\n> ageskdf <- agg(df, skewness = skewness(df$age))\n\n> showDF(ageskdf)\n+------------------+\n| skewness         |\n+------------------+\n|0.7846682380932389|\n+------------------+\n```", "```scala\n> agekrdf <- agg(df, kurtosis = kurtosis(df$age))\n\n> showDF(agekrdf)\n+------------------+\n| kurtosis         |\n+------------------+\n|0.7910698035274022|\n+------------------+\n```", "```scala\n> covagedurdf <- cov(df, \"age\", \"duration\")\n\n> corragedurdf <- corr(df, \"age\", \"duration\", method = \"pearson\")\n\n> covagedurdf\n[1] -2.339147\n\n> corragedurdf\n[1] -0.000865705\n```", "```scala\n> n <- nrow(df)\n\n> jobrelfreqdf <- agg(groupBy(df, df$job), Count = n(df$job), Percentage = n(df$job) * (100/n))\n\n> showDF(jobrelfreqdf)\n```", "```scala\n> contabdf <- crosstab(df, \"job\", \"marital\")\n\n> contabdf\n```", "```scala\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/bank-additional/bank-additional-full.csv\"\n\n> df <- read.df(csvPath, \"csv\", header = \"true\", inferSchema = \"true\", na.strings = \"NA\", delimiter= \";\")\n\n> persist(df, \"MEMORY_ONLY\")\n\n> require(ggplot2)\n```", "```scala\n> ldf <- collect(select(df, df$age, df$duration, df$education, df$marital, df$job))\n\n> g1 <- ggplot(ldf, aes(x = marital))\n\n> g1 + geom_bar()\n```", "```scala\n> library(MASS)\n\n> par(mfrow=c(2,2))\n\n> truehist(ldf$\"age\", h = 5, col=\"slategray3\", xlab=\"Age Groups(5 years)\")\n\n> barplot((table(ldf$education)), names.arg=c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"), col=c(\"slateblue\", \"slateblue2\", \"slateblue3\", \"slateblue4\", \"slategray\", \"slategray2\", \"slategray3\", \"slategray4\"), main=\"Education\")\n\n> barplot((table(ldf$marital)), names.arg=c(\"Divorce\", \"Married\", \"Single\", \"Unknown\"), col=c(\"slategray\", \"slategray1\", \"slategray2\", \"slategray3\"), main=\"Marital Status\")\n\n> barplot((table(ldf$job)), , names.arg=c(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\"), main=\"Job\")\n```", "```scala\n> g2 <- ggplot(ldf, aes(x = marital, fill = education))\n\n> g2 + geom_bar(position = \"fill\")\n```", "```scala\n> g3 <- ggplot(ldf, aes(age))\n\n> g3 + geom_histogram(binwidth=5)\n```", "```scala\n> g3 + geom_freqpoly(binwidth=5)\n```", "```scala\n> g4 <- ggplot(ldf, aes(x = marital, y = duration))\n\n> g4 + geom_boxplot()\n```", "```scala\n> g3 + geom_histogram() + facet_wrap(~education)\n```", "```scala\n> par(mfrow=c(1,2))\n\n> boxplot(ldf$age, col=\"slategray2\", pch=19, main=\"Age\")\n\n> boxplot(ldf$duration, col=\"slategray2\", pch=19, main=\"Duration\")\n```", "```scala\n> ggplot(ldf, aes(age, duration)) + geom_point(alpha = 0.3) + stat_smooth()I\n```", "```scala\n> ageAndDurationValuesByMarital <- ggplot(ldf, aes(age, duration)) + geom_point(alpha = \"0.2\") + facet_wrap(~marital)\n\n> ageAndDurationValuesByMarital\n```", "```scala\n> createOrReplaceTempView(df, \"customer\")\n\n> localAvgDurationEducationAgeDF <- collect(sql(\"select education, avg(age) as avgAge, avg(duration) as avgDuration from customer group by education\"))\n\n> avgAgeAndDurationValuesByEducation <- ggplot(localAvgDurationEducationAgeDF, aes(group=education, x=avgAge, y=avgDuration)) + geom_point() + geom_text(data=localAvgDurationEducationAgeDF, mapping=aes(x=avgAge, y=avgDuration, label=education), size=2, vjust=2, hjust=0.75)\n\n> avgAgeAndDurationValuesByEducation\n```", "```scala\n> plot(density(ldf$duration), main = \"Density Plot\", xlab = \"Duration\", yaxt = 'n')\n\n> abline(v = mean(ldf$duration), col = 'green', lwd = 2)\n\n> legend('topright', legend = c(\"Actual Data\", \"Mean\"), fill = c('black', 'green'))\n```", "```scala\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/CommViolPredUnnormalizedData.csv\"\n\n> df <- read.df(csvPath, \"csv\", header = \"false\", inferSchema = \"false\", na.strings = \"NA\", delimiter= \",\")\n\n> persist(df, \"MEMORY_ONLY\")\n\n> xdf = select(df, \"_c1\",\"_c143\")\n\n> newDF <- withColumnRenamed(xdf, \"_c1\", \"state\")\n\n> arsonsstatesdf <- withColumnRenamed(newDF, \"_c143\", \"narsons\")\n```", "```scala\n> avgArsons <- collect(agg(groupBy(arsonsstatesdf, \"state\"), AVG_ARSONS=avg(arsonsstatesdf$narsons)))\n```", "```scala\n> state_names <- read.csv(\"file:///Users/aurobindosarkar/downloads/csv_hus/states.csv\")\n```", "```scala\n> avgArsons$region <- factor(avgArsons$state, levels=state_names$code, labels=tolower(state_names$name))\n```", "```scala\n> states_map <- map_data(\"state\")\n```", "```scala\n> merged_data <- merge(states_map, avgArsons, by=\"region\")\n\n> ggplot(merged_data, aes(x = long, y = lat, group = group, fill = AVG_ARSONS)) + geom_polygon(color = \"white\") + theme_bw()\n```", "```scala\n> library(igraph)\n\n> library(magrittr)\n\n> inDF <- read.df(\"file:///Users/aurobindosarkar/Downloads/sx-askubuntu.txt\", \"csv\", header=\"false\", delimiter=\" \")\n\n> linksDF <- subset(inDF, select = c(1, 2)) %>% withColumnRenamed(\"_c0\", \"src\") %>% withColumnRenamed(\"_c1\", \"dst\")\n\n> llinksDF <- collect(sample(linksDF, FALSE, 0.01, 1L))\n\n> g1 <- graph_from_data_frame(llinksDF, directed = TRUE, vertices = NULL)\n\n> plot(g1, edge.arrow.size=.001, vertex.label=NA, vertex.size=0.1)\n```", "```scala\n> inDF <- read.df(\"file:///Users/aurobindosarkar/Downloads/sx-askubuntu.txt\", \"csv\", header=\"false\", delimiter=\" \")\n\n> linksDF <- subset(inDF, select = c(1, 2)) %>% withColumnRenamed(\"_c0\", \"src\") %>% withColumnRenamed(\"_c1\", \"dst\")\n\n> llinksDF <- collect(sample(linksDF, FALSE, 0.0005, 1L))\n\n> g1 <- graph_from_data_frame(llinksDF, directed = FALSE)\n\n> g1 <- simplify(g1, remove.multiple = F, remove.loops = T)\n\n> plot(g1, edge.color=\"black\", vertex.color=\"red\", vertex.label=NA, vertex.size=2)\n```", "```scala\n> library(magrittr)\n\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/winequality/winequality-white.csv\"\n```", "```scala\n> winedf <- mutate(indf, label = ifelse(indf$quality >= 6, 1, 0))\n\n> winedf <- drop(winedf, \"quality\")\n\n> seed <- 12345\n```", "```scala\n> trainingdf <- sample(winedf, withReplacement=FALSE, fraction=0.9, seed=seed)\n\n> testdf <- except(winedf, trainingdf)\n```", "```scala\n> model <- spark.logit(trainingdf, label ~ ., maxIter = 10, regParam = 0.1, elasticNetParam = 0.8)\n```", "```scala\n> summary(model)\n```", "```scala\n> predictions <- predict(model, testdf)\n\n> showDF(select(predictions, \"label\", \"rawPrediction\", \"probability\", \"prediction\"), 5)\n```", "```scala\n> nrow(filter(predictions, predictions$label != predictions$prediction))\n[1] 111\n```", "```scala\n> model <- spark.randomForest(trainingdf, label ~ ., type=\"classification\", maxDepth = 5, numTrees = 10)\n\n> summary(model)\n```", "```scala\n> predictions <- predict(model, testdf)\n\n> showDF(select(predictions, \"label\", \"rawPrediction\", \"probability\", \"prediction\"), 5)\n```", "```scala\n> nrow(filter(predictions, predictions$label != predictions$prediction))\n[1] 79\n```", "```scala\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/winequality/winequality-white.csv\"\n```", "```scala\n> trainingdf <- sample(indf, withReplacement=FALSE, fraction=0.9, seed=seed)\n\n> testdf <- except(indf, trainingdf)\n\n> model <- spark.glm(indf, quality ~ ., family = gaussian, tol = 1e-06, maxIter = 25, weightCol = NULL, regParam = 0.1)\n\n> summary(model)\n```", "```scala\n> predictions <- predict(model, testdf)\n\n> showDF(select(predictions, \"quality\", \"prediction\"), 5)\n```", "```scala\n> winedf <- mutate(indf, label = ifelse(indf$quality >= 6, 1, 0))\n\n> winedf <- drop(winedf, \"quality\")\n\n> trainingdf <- sample(winedf, withReplacement=FALSE, fraction=0.9, seed=seed)\n\n> testdf <- except(winedf, trainingdf)\n\n> testdf <- except(winedf, trainingdf)\n\n> model <- spark.gaussianMixture(trainingdf, ~ sulphates + citric_acid + fixed_acidity + total_sulfur_dioxide + chlorides + free_sulfur_dioxide + density + volatile_acidity + alcohol + pH + residual_sugar, k = 2)\n\n> summary(model)\n\n> predictions <- predict(model, testdf)\n\n> showDF(select(predictions, \"label\", \"prediction\"), 5)\n```", "```scala\n> test <- spark.kstest(indf, \"fixed_acidity\", \"norm\", c(0, 1))\n\n> testSummary <- summary(test)\n\n> testSummary\n```", "```scala\ndegrees of freedom = 0\n\nstatistic = 0.9999276519560749\n\npValue = 0.0\n#Very strong presumption against null hypothesis: Sample follows theoretical distribution.\n```", "```scala\n> library(magrittr)\n\n> csvPath <- \"file:///Users/aurobindosarkar/Downloads/winequality/winequality-white.csv\"\n\n> indf <- read.df(csvPath, \"csv\", header = \"true\", inferSchema = \"true\", na.strings = \"NA\", delimiter= \";\") %>% withColumnRenamed(\"fixed acidity\", \"fixed_acidity\") %>% withColumnRenamed(\"volatile acidity\", \"volatile_acidity\") %>% withColumnRenamed(\"citric acid\", \"citric_acid\") %>% withColumnRenamed(\"residual sugar\", \"residual_sugar\") %>% withColumnRenamed(\"free sulfur dioxide\", \"free_sulfur_dioxide\") %>% withColumnRenamed(\"total sulfur dioxide\", \"total_sulfur_dioxide\")\n\n> lindf <- collect(indf)\n```", "```scala\n> families <- c(\"gaussian\", \"poisson\")\n\n> train <- function(family) {\n+ model <- glm(quality ~ ., lindf, family = family)\n+ summary(model)\n+ }\n```", "```scala\n> model.summaries <- spark.lapply(families, train)\n```", "```scala\n> print(model.summaries)\n```"]