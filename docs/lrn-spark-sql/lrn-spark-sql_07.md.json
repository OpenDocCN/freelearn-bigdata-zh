["```scala\n./bin/spark-shell --packages graphframes:graphframes:0.3.0-spark2.0-s_2.11 --driver-memory 12g\n```", "```scala\nscala> import org.apache.spark.sql.types._\nscala> import org.apache.spark.sql.functions._\nscala> import spark.implicits._\nscala> import org.apache.spark.sql.Row\nscala> import org.graphframes._\n```", "```scala\nscala> val edgesRDD = spark.sparkContext.textFile(\"file:///Users/aurobindosarkar/Downloads/amzncopurchase/amazon0601.txt\")\n```", "```scala\nscala> val schemaString = \"src dst\"\nscala> val fields = schemaString.split(\" \").map(fieldName => StructField(fieldName, StringType, nullable = false))\n\nscala> val edgesSchema = new StructType(fields)\n\nscala> val rowRDD = edgesRDD.map(_.split(\"\\t\")).map(attributes => Row(attributes(0).trim, attributes(1).trim))\n\nscala> val edgesDF = spark.createDataFrame(rowRDD, edgesSchema)\n```", "```scala\nscala> val srcVerticesDF = edgesDF.select($\"src\").distinct\nscala> val destVerticesDF = edgesDF.select($\"dst\").distinct\nscala> val verticesDF = srcVerticesDF.union(destVerticesDF).distinct.select($\"src\".alias(\"id\"))\n```", "```scala\nscala> edgesDF.count()\nres0: Long = 3387388                                                          \nscala> verticesDF.count()\nres1: Long = 403394\n```", "```scala\nscala> val g = GraphFrame(verticesDF, edgesDF)\n```", "```scala\nscala> g.vertices.show(5)\n+---+                                                                     \n| id|\n+---+\n|296|\n|467|\n|675|\n|691|\n|829|\n+---+\nonly showing top 5 rows\nscala> g.edges.show(5)\n+---+---+\n|src|dst|\n+---+---+\n| 0| 1|\n| 0| 2|\n| 0| 3|\n| 0| 4|\n| 0| 5|\n+---+---+\nonly showing top 5 rows\nscala> g.inDegrees.show(5)\n+----+--------+                                                                \n| id|inDegree|\n+----+--------+\n| 467|     28|\n|1090|      9|\n| 296|      5|\n|3959|      7|\n|6240|     44|\n+----+--------+\nonly showing top 5 rows\nscala> g.outDegrees.show(5)\n+---+---------+                                                                \n| id|outDegree|\n+---+---------+\n|296|       10|\n|467|       10|\n|675|       10|\n|691|       10|\n|829|       10|\n+---+---------+\nonly showing top 5 rows\n```", "```scala\nscala> g.edges.filter(\"src == 2\").show()\n+---+---+\n|src|dst|\n+---+---+\n|  2|  0|\n|  2|  1|\n|  2|  3|\n|  2|  4|\n|  2|  6|\n|  2| 10|\n|  2| 47|\n|  2| 54|\n|  2|118|\n|  2|355|\n+---+---+\nscala> g.edges.filter(\"src == 2\").count()\nres6: Long = 10\nscala> g.edges.filter(\"dst == 2\").show()\n+---+---+\n|src|dst|\n+---+---+\n|  0|  2|\n|  1|  2|\n|  3|  2|\n+---+---+\nscala> g.inDegrees.filter(\"inDegree >= 10\").show(5)\n+----+--------+                                                                \n| id|inDegree|\n+----+--------+\n| 467|      28|\n|6240|      44|\n|1159|      12|\n|1512|     110|\n| 675|      13|\n+----+--------+\nonly showing top 5 rows\n```", "```scala\nscala> g.inDegrees.groupBy(\"inDegree\").count().sort(desc(\"inDegree\")).show(5)\n+--------+-----+                                                              \n|inDegree|count|\n+--------+-----+\n|   2751|     1|\n|   2487|     1|\n|   2281|     1|\n|   1512|     1|\n|   1174|     1|\n+--------+-----+\nonly showing top 5 rows\nscala> g.outDegrees.groupBy(\"outDegree\").count().sort(desc(\"outDegree\")).show(5)\n+---------+------+                                                            \n|outDegree| count|\n+---------+------+\n|       10|279108|\n|        9| 13297|\n|        8| 11370|\n|        7| 11906|\n|        6| 12827|\n+---------+------+\nonly showing top 5 rows\n```", "```scala\nscala> val motifs = g.find(\"(a)-[e]->(b); (b)-[e2]->(a)\")\nscala> motifs.show(5)\n+--------+---------------+--------+---------------+                            \n|       a|             e|       b|             e2|\n+--------+---------------+--------+---------------+\n| [85609]| [85609,100018]|[100018]| [100018,85609]|\n| [86839]| [86839,100042]|[100042]| [100042,86839]|\n| [55528]| [55528,100087]|[100087]| [100087,55528]|\n|[178970]|[178970,100124]|[100124]|[100124,178970]|\n|[100124]|[100124,100125]|[100125]|[100125,100124]|\n+--------+---------------+--------+---------------+\nonly showing top 5 rows\n```", "```scala\nscala> motifs.filter(\"b.id == 2\").show()\n+---+-----+---+-----+                                                          \n|  a|    e|  b|   e2|\n+---+-----+---+-----+\n|[3]|[3,2]|[2]|[2,3]|\n|[0]|[0,2]|[2]|[2,0]|\n|[1]|[1,2]|[2]|[2,1]|\n+---+-----+---+-----+\n```", "```scala\nscala> val motifs3 = g.find(\"(a)-[e1]->(b); (a)-[e2]->(c)\").filter(\"(b != c)\")\n\nscala> motifs3.show(5)\n+--------+---------------+--------+---------------+--------+                  \n|       a|             e1|       b|             e2|       c|\n+--------+---------------+--------+---------------+--------+\n|[109254]|   [109254,8742]| [8742]|[109254,100010]|[100010]|\n|[109254]|   [109254,8741]| [8741]|[109254,100010]|[100010]|\n|[109254]| [109254,59782]| [59782]|[109254,100010]|[100010]|\n|[109254]|[109254,115349]|[115349]|[109254,100010]|[100010]|\n|[109254]| [109254,53996]| [53996]|[109254,100010]|[100010]|\n+--------+---------------+--------+---------------+--------+\nonly showing top 5 rows\n```", "```scala\nscala> val motifs3 = g.find(\"(a)-[]->(b); (a)-[]->(c)\").filter(\"(b != c)\")\nscala> motifs3.show()\n+--------+--------+--------+                                                  \n|       a|       b|       c|\n+--------+--------+--------+\n|[109254]| [8742]| [100010]|\n|[109254]| [8741]| [100010]|\n|[109254]| [59782]|[100010]|\n|[109254]|[115349]|[100010]|\n|[109254]| [53996]|[100010]|\n|[109254]|[109257]|[100010]|\n|[109254]| [62046]|[100010]|\n|[109254]| [94411]|[100010]|\n|[109254]|[115348]|[100010]|\n|[117041]| [73722]|[100010]|\n|[117041]|[193912]|[100010]|\n|[117041]| [52568]|[100010]|\n|[117041]| [57835]|[100010]|\n|[117041]|[164019]|[100010]|\n|[117041]| [63821]|[100010]|\n|[117041]|[162691]|[100010]|\n|[117041]| [69365]|[100010]|\n|[117041]| [4849]|[100010]|\n|[148522]| [8742]|[100010]|\n|[148522]|[100008]|[100010]|\n+--------+--------+--------+\nonly showing top 20 rows\nscala> motifs3.count()\nres20: Long = 28196586\n```", "```scala\nscala> val motifs3 = g.find(\"(a)-[]->(b); (a)-[]->(c); (b)-[]->(a)\").filter(\"(b != c)\")\nscala> motifs3.show()\n+-------+--------+--------+                                                    \n|      a|       b|       c|\n+-------+--------+--------+\n|[85609]|[100018]| [85611]|\n|[85609]|[100018]| [85610]|\n|[85609]|[100018]| [85752]|\n|[85609]|[100018]| [28286]|\n|[85609]|[100018]| [93910]|\n|[85609]|[100018]| [85753]|\n|[85609]|[100018]| [60945]|\n|[85609]|[100018]| [47246]|\n|[85609]|[100018]| [85614]|\n|[86839]|[100042]|[100040]|\n|[86839]|[100042]| [46600]|\n|[86839]|[100042]|[100039]|\n|[86839]|[100042]|[100041]|\n|[86839]|[100042]| [27186]|\n|[86839]|[100042]|[100044]|\n|[86839]|[100042]|[100043]|\n|[86839]|[100042]| [86841]|\n|[86839]|[100042]| [86838]|\n|[55528]|[100087]| [55531]|\n|[55528]|[100087]| [40067]|\n+-------+--------+--------+\nonly showing top 20 rows\nscala> motifs3.count()\nres17: Long = 15657738\n```", "```scala\nscala> val motifs3 = g.find(\"(a)-[]->(b); (c)-[]->(b)\").filter(\"(a != c)\")\nscala> motifs3.show(5)\n+--------+------+--------+                                                    \n|       a|     b|       c|\n+--------+------+--------+\n|[365079]|[8742]|[100010]|\n|[241393]|[8742]|[100010]|\n| [33284]|[8742]|[100010]|\n|[198072]|[8742]|[100010]|\n|[203728]|[8742]|[100010]|\n+--------+------+--------+\nonly showing top 5 rows\nscala> motifs3.count()\nres24: Long = 119218310\n```", "```scala\nscala> val motifs3 = g.find(\"(a)-[]->(b); (b)-[]->(c); (c)-[]->(b)\")\nscala> motifs3.show(5)\n+--------+-------+--------+                                                    \n|       a|      b|       c|\n+--------+-------+--------+\n|[188454]|[85609]|[100018]|\n| [85611]|[85609]|[100018]|\n| [98017]|[85609]|[100018]|\n|[142029]|[85609]|[100018]|\n| [64516]|[85609]|[100018]|\n+--------+-------+--------+\nonly showing top 5 rows\nscala> motifs3.count()\nres26: Long = 23373805.\n```", "```scala\nscala> val motifs4 = g.find(\"(a)-[e1]->(b); (c)-[e2]->(b); (c)-[e3]->(d)\").filter(\"(a != c) AND (d != b) AND (d != a)\")\nscala> motifs4.show(5)\n```", "```scala\nscala> motifs4.count()\nres2: Long = 945551688\n```", "```scala\nscala> val v2 = g.vertices.filter(\"src < 10\")\nscala> val e2 = g.edges.filter(\"src < 10\")\nscala> val g2 = GraphFrame(v2, e2)\nscala> g2.edges.groupBy(\"src\").count().show()\n+---+-----+                                                                    \n|src|count|\n+---+-----+\n| 7|   10|\n| 3|   10|\n| 8|   10|\n| 0|   10|\n| 5|   10|\n| 6|   10|\n| 9|   10|\n| 1|   10|\n| 4|   10|\n| 2|   10|\n+---+-----+\nscala> val paths = g.find(\"(a)-[e]->(b)\").filter(\"e.src < e.dst\")\nscala> val e2 = paths.select(\"e.*\")\nscala> e2.show(5)\n+------+------+                                                                \n|   src|   dst|\n+------+------+\n|100008|100010|\n|100226|100227|\n|100225|100227|\n|100224|100227|\n|100223|100227|\n+------+------+\nonly showing top 5 rows\n```", "```scala\nval result = g.stronglyConnectedComponents.maxIter(10).run()\nresult.select(\"id\", \"component\").groupBy(\"component\").count().sort($\"count\".desc).show()\n+---------+------+                                                            \n|component| count|\n+---------+------+\n|        0|395234|\n|   312598|   111|\n|   379229|   105|\n|   107295|    81|\n|   359845|    70|\n|    40836|    64|\n|   357970|    64|\n|   189338|    61|\n|   369081|    59|\n|   152634|    58|\n|   167178|    55|\n|    35086|    50|\n|    81674|    48|\n|   376845|    48|\n|   177702|    47|\n|   319708|    44|\n|   130664|    43|\n|   279703|    41|\n|   273764|    41|\n|   324355|    40|\n+---------+------+\nonly showing top 20 rows\n```", "```scala\nval results = g.triangleCount.run()\nresults.select(\"id\", \"count\").show()\n+------+-----+                                                                  \n|    id|count|\n+------+-----+\n|100010|   73|\n|100140|   15|\n|100227|  332|\n|100263|    9|\n|100320|    8|\n|100553|   41|\n|100704|    3|\n|100735|   13|\n|100768|   37|\n| 10096|   58|\n|100964|   87|\n|101021|   30|\n|101122|   52|\n|101205|  152|\n|101261|   31|\n|101272|   19|\n|102113|   38|\n|102521|   23|\n|102536|    2|\n|102539|   37|\n+------+-----+\nonly showing top 20 rows\n```", "```scala\nval results = g.pageRank.resetProbability(0.15).tol(0.01).run()\nval prank = results.vertices.sort(desc(\"pagerank\"))\nprank.show(5)\n+-----+------------------+                                                      \n|   id|          pagerank|\n+-----+------------------+\n|   45| 586.2075242838272|\n| 1036| 512.2355738350872|\n| 1037|  506.900472599229|\n|   50| 485.4457370914238|\n| 1039|438.64149165397276|\n+----+------------------+\nonly showing top 5 rows\n```", "```scala\nval results = g.labelPropagation.maxIter(10).run()\nresults.select(\"id\", \"label\").show()\n+-----+-----+                                                                  \n|label|count|\n+-----+-----+\n| 1677|    2|\n| 5385|   23|\n| 7279|   11|\n| 9233|    7|\n| 9458|   10|\n| 9978|   80|\n|10422|    8|\n|11945|   13|\n|13098|    6|\n|13452|   12|\n|14117|   49|\n|21899|   20|\n|23019|   12|\n|27651|   80|\n|29824|   17|\n|30421|    9|\n|32571|    4|\n|37310|    1|\n|41424|   48|\n|45726|    4|\n+-----+-----+\nonly showing top 20 rows\nresults.select(\"id\", \"label\").groupBy(\"label\").count().sort(desc(\"count\")).show(5)\n+-----+-----+                                                                  \n|label|count|\n+-----+-----+\n| 1110| 2830|\n|  352| 2266|\n| 9965| 1413|\n| 9982|  828|\n|11224|  761|\n+-----+-----+\nonly showing top 5 rows\n```", "```scala\nval results = g.shortestPaths.landmarks(Seq(\"1110\", \"352\")).run()\nresults.select(\"id\", \"distances\").take(5).foreach(println)\n[8,Map(352 -> 3, 1110 -> 9)]                                                  \n[22,Map(352 -> 4, 1110 -> 4)]\n[290,Map(352 -> 4, 1110 -> 6)]\n[752,Map()]\n[2453,Map(352 -> 8, 1110 -> 11)]\n```", "```scala\ng.vertices.write.parquet(\"hdfs://localhost:9000/gf/vertices\")\ng.edges.write.parquet(\"hdfs://localhost:9000/gf/edges\")\n```", "```scala\nval v = spark.read.parquet(\"hdfs://localhost:9000/gf/vertices\")\nval e = spark.read.parquet(\"hdfs://localhost:9000/gf/edges\")\nval g = GraphFrame(v, e)\n```", "```scala\nscala> val df1 = spark.read.json(\"file:///Users/aurobindosarkar/Downloads/input.json\")\nscala> df1.printSchema()\nroot\n|-- ASIN: string (nullable = true)\n|-- Id: long (nullable = true)\n|-- ReviewMetaData: struct (nullable = true)\n|   |-- avg_rating: double (nullable = true)\n|   |-- downloaded: long (nullable = true)\n|   |-- total: long (nullable = true)\n|-- categories: long (nullable = true)\n|-- categoryLines: array (nullable = true)\n|   |-- element: struct (containsNull = true)\n|   |   |-- category: string (nullable = true)\n|-- group: string (nullable = true)\n|-- reviewLines: array (nullable = true)\n|   |-- element: struct (containsNull = true)\n|   |   |-- review: struct (nullable = true)\n|   |   |   |-- customerId: string (nullable = true)\n|   |   |   |-- date: string (nullable = true)\n|   |   |   |-- helpful: long (nullable = true)\n|   |   |   |-- rating: long (nullable = true)\n|   |   |   |-- votes: long (nullable = true)\n|-- salerank: long (nullable = true)\n|-- similarLines: array (nullable = true)\n|   |-- element: struct (containsNull = true)\n|   |   |-- similar: string (nullable = true)\n|-- similars: long (nullable = true)\n|-- title: string (nullable = true)\nscala> df1.take(5).foreach(println)\n```", "```scala\nscala> val x1=df1.select(df1.col(\"similarLines\"))\nscala> df1.select(df1.col(\"similarLines.similar\")).take(5).foreach(println)\n```", "```scala\nscala> val flattened = df1.select($\"ASIN\", explode($\"reviewLines.review\").as(\"review_flat\"))\nscala> flattened.show()\n+----------+--------------------+\n|     ASIN|         review_flat|\n+----------+--------------------+\n|0827229534|[A2JW67OY8U6HHK,2...|\n|0827229534|[A2VE83MZF98ITY,2...|\n|0738700797|[A11NCO6YTE4BTJ,2...|\n|0738700797|[A9CQ3PLRNIR83,20...|\n|0738700797|[A13SG9ACZ9O5IM,2...|\n|0738700797|[A1BDAI6VEYMAZA,2...|\n|0738700797|[A2P6KAWXJ16234,2...|\n|0738700797|[AMACWC3M7PQFR,20...|\n|0738700797|[A3GO7UV9XX14D8,2...|\n|0738700797|[A1GIL64QK68WKL,2...|\n|0738700797|[AEOBOF2ONQJWV,20...|\n|0738700797|[A3IGHTES8ME05L,2...|\n|0738700797|[A1CP26N8RHYVVO,2...|\n|0738700797|[ANEIANH0WAT9D,20...|\n|0486287785|[A3IDGASRQAW8B2,2...|\n|0842328327|[A2591BUPXCS705,2...|\n|0486220125|[ATVPDKIKX0DER,19...|\n|0486220125|[AUEZ7NVOEHYRY,19...|\n|0486220125|[ATVPDKIKX0DER,19...|\n|0486220125|[AJYG6ZJUQPZ9M,20...|\n+----------+--------------------+\nonly showing top 20 rows\nscala> val flatReview = flattened.select(\"ASIN\", \"review_flat.customerId\")\n```", "```scala\nscala> val nodesDF = df1.select($\"ASIN\".alias(\"id\"), $\"Id\".alias(\"productId\"), $\"title\", $\"ReviewMetaData\", $\"categories\", $\"categoryLines\", $\"group\", $\"reviewLines\", $\"salerank\", $\"similarLines\", $\"similars\")\n```", "```scala\nscala> val edgesDF = df1.select($\"ASIN\".alias(\"src\"), explode($\"similarLines.similar\").as(\"dst\"))\nscala> val g = GraphFrame(nodesDF, edgesDF)\n```", "```scala\nscala> g.edges.filter(\"salerank < 100\").count()\nres97: Long = 750                                                              \nscala> g.vertices.groupBy(\"group\").count().show()\n+------------+------+                                                          \n|       group| count|\n+------------+------+\n|       Video| 26131|\n|         Toy|     8|\n|         DVD| 19828|\n|      Sports|     1|\n|        null|  5868|\n|Baby Product|     1|\n| Video Games|     1|\n|        Book|393561|\n|       Music|103144|\n|    Software|     5|\n|          CE|     4|\n+------------+------+\n```", "```scala\nscala> val v2 = g.vertices.filter(\"group = 'Book'\")\nscala> val g2 = GraphFrame(v2, e2)\nscala> g2.vertices.count()\nres6: Long = 393561                                                            \n```", "```scala\nscala> g2.edges.count()\nres7: Long = 1788725    \n```", "```scala\nscala> val v2t = v2.select(\"id\")\nscala> val e2t = v2t.join(e2, v2t(\"id\") === e2(\"src\"))\nscala> e2t.count()\nres8: Long = 1316257                                                          \nscala> val e2t1 = v2t.join(e2, v2t(\"id\") === e2(\"src\")).drop(\"id\")\nscala> val e2t2 = v2t.join(e2t1, v2t(\"id\") === e2t1(\"dst\")).drop(\"id\")\nscala> e2t2.count()\nres9: Long = 911960                                                            \nscala> val g2f = GraphFrame(v2, e2t2)\nscala> g2f.vertices.count()\nres10: Long = 393561                                                          \nscala> g2f.edges.count()\nres11: Long = 911960\n```", "```scala\nscala> g2.edges.take(5).foreach(println)\n[B00008MNUJ,0822959046]                                                        \n[0786632550,0793529395]\n[0942272463,0942272692]\n[0942272463,1567183298]\n[0060537612,0689820305]\nscala> val es = g.edges.filter(\"salerank < 100\")\nscala> val e3 = es.select(\"src\", \"dst\")\nscala> val g3 = GraphFrame(g.vertices, e3)\nscala> val motifs = g3.find(\"(a)-[e]->(b); (b)-[e2]->(a)\")\nscala> motifs.show()\n```", "```scala\nscala> motifs.filter(\"b.ReviewMetaData.avg_rating > 4.0\").show()\n```", "```scala\nscala> val paths = g3.find(\"(a)-[e]->(b)\").filter(\"a.group = 'Book' AND b.group = 'Book'\").filter(\"a.salerank < b.salerank\")\nscala> val e2 = paths.select(\"e.src\", \"e.dst\")\nscala> val g2 = GraphFrame(g.vertices, e2)\nscala> g2.vertices.take(5).foreach(println)\n```", "```scala\nscala> import org.graphframes.lib.AggregateMessages\nscala> val AM = AggregateMessages\nscala> val msgToSrc = AM.dst(\"similars\")\nscala> val msgToDst = AM.src(\"similars\")\nscala> val agg = g.aggregateMessages.sendToSrc(msgToSrc).sendToDst(msgToDst).agg(sum(AM.msg).as(\"SummedSimilars\"))\nscala> agg.show()\n+----------+--------------+                                                    \n|       id| SummedSimilars|\n+----------+--------------+\n|0004708237|             5|\n|0023605103|            35|\n|0027861317|            30|\n|0028624599|            30|\n|0028633784|            40|\n|0028642074|            45|\n|0030259282|            10|\n|0060082135|            20|\n|0060279257|            20|\n|0060298804|            25|\n|0060392436|            25|\n|0060540745|           125|\n|0060611561|           100|\n|0060921005|            15|\n|0060925175|            48|\n|0060929081|            54|\n|0060959126|            10|\n|0060960388|            29|\n|006097060X|            50|\n|0060988940|            25|\n+----------+--------------+\nonly showing top 20 rows\n```", "```scala\nscala> val joinDF = nodesDF.join(edgesDF).where(nodesDF(\"id\") === edgesDF(\"src\")).withColumn(\"relationship\", when(($\"similars\" > 4) and ($\"categories\" <= 3), \"highSimilars\").otherwise(\"alsoPurchased\"))\nscala> val edgesDFR = joinDF.select(\"src\", \"dst\", \"relationship\")\nscala> val gDFR = GraphFrame(nodesDF, edgesDFR)\n```", "```scala\nscala> gDFR.edges.groupBy(\"relationship\").count().show()\n+-------------+-------+                                                        \n| relationship| count|\n+-------------+-------+\n|alsoPurchased|1034375|\n| highSimilars| 754350|\n+-------------+-------+\nscala> gDFR.edges.show()\n+----------+----------+-------------+                                          \n|       src|       dst| relationship|\n+----------+----------+-------------+\n|0004708237|4770027508|alsoPurchased|\n|0023605103|0830812717| highSimilars|\n|0023605103|0830812865| highSimilars|\n|0023605103|0800611365| highSimilars|\n|0023605103|0801063914| highSimilars|\n|0023605103|0802819478| highSimilars|\n|0027861317|0803706197| highSimilars|\n|0027861317|0525452710| highSimilars|\n|0027861317|0152014829| highSimilars|\n|0027861317|068980718X| highSimilars|\n|0027861317|0761317910| highSimilars|\n|0028624599|1889392138|alsoPurchased|\n|0028624599|0934081239|alsoPurchased|\n|0028624599|0761528245|alsoPurchased|\n|0028624599|0761518045|alsoPurchased|\n|0028624599|0811836878|alsoPurchased|\n|0028633784|0812046943| highSimilars|\n|0028633784|0812046005| highSimilars|\n|0028633784|0028629051| highSimilars|\n|0028633784|0140144358| highSimilars|\n+----------+----------+-------------+\nonly showing top 20 rows\n```", "```scala\nscala> val v2 = gDFR.vertices.filter(\"salerank < 2000000\")\nscala> val e2 = gDFR.edges.filter(\"relationship = 'highSimilars'\")\nscala> val g2 = GraphFrame(v2, e2)\n```", "```scala\nscala> val v2 = gDFR.vertices.select(\"id\", \"group\", \"similars\").filter(\"group = 'Book'\")\nscala> val e2 = gDFR.edges.filter(\"relationship = 'highSimilars'\")\nscala> val g2 = GraphFrame(v2, e2)\nscala> val result1 = g2.find(\"(a)-[]->(b); (b)-[]->(c); !(a)-[]->(c)\").filter(\"(a.group = c.group) and (a.similars = c.similars)\")\nscala> val result2 = result1.filter(\"a.id != c.id\").select(\"a.id\", \"a.group\", \"a.similars\", \"c.id\", \"c.group\", \"c.similars\")\nscala> result2.show(5)\n+----------+-----+--------+----------+-----+--------+                          \n|       id|group|similars|       id|group|similars|\n+----------+-----+--------+----------+-----+--------+\n|0002551489| Book|       5|0002154129| Book|       5|\n|0006388515| Book|       5|0679738711| Book|       5|\n|0020438001| Book|       5|0395169615| Book|       5|\n|0023078251| Book|       5|0394704371| Book|       5|\n|0023237309| Book|       5|0874415098| Book|       5|\n+----------+-----+--------+----------+-----+--------+\nonly showing top 5 rows\n```", "```scala\nscala> val paths = gDFR.find(\"(a)-[e]->(b)\").filter(\"e.relationship = 'highSimilars'\").filter(\"a.group = b.group\")\nscala> val e2 = paths.select(\"e.src\", \"e.dst\", \"e.relationship\")\nscala> val g2 = GraphFrame(gDFR.vertices, e2)\nscala> val numEHS = g2.edges.count()\nnumEHS: Long = 511524  \nscala> val bfsDF = gDFR.bfs.fromExpr(\"group = 'Book'\").toExpr(\"categories < 3\").edgeFilter(\"relationship != 'alsoPurchased'\").maxPathLength(3).run()\nscala> bfsDF.take(2).foreach(println)\n```", "```scala\nscala> val v2 = gDFR.vertices.select(\"id\", \"group\", \"title\").filter(\"group = 'Book'\")\nscala> val e2 = gDFR.edges.filter(\"relationship = 'highSimilars'\")\nscala> val g2 = GraphFrame(v2, e2)\nscala> val results = g2.pageRank.resetProbability(0.15).tol(0.01).run()\nscala> val prank = results.vertices.sort(desc(\"pagerank\"))\nscala> prank.take(10).foreach(println)\n```", "```scala\nscala> g.edges.filter(\"salerank < 100\").explain()\n```", "```scala\nscala> val v1 = g.vertices.select(\"id\", \"group\").na.fill(\"unknown\")\nscala> val g1 = GraphFrame(v1, g.edges)\n```", "```scala\nscala> val v2 = g.vertices.select(\"id\", \"group\").na.fill(\"unknown\")\nscala> val g2t1 = GraphFrame(v2, g.edges)\nscala> val g2t2 = g2t1.vertices.repartition(11, $\"group\")\nscala> val g2 = GraphFrame(g2t2, g.edges)\n```", "```scala\nscala> g1.vertices.show()\n+----------+-------+\n|       id|   group|\n+----------+-------+\n|0771044445|unknown|\n|0827229534|   Book|\n|0738700797|   Book|\n|0486287785|   Book|\n|0842328327|   Book|\n|1577943082|   Book|\n|0486220125|   Book|\n|B00000AU3R|  Music|\n|0231118597|   Book|\n|1859677800|   Book|\n|0375709363|   Book|\n|0871318237|   Book|\n|1590770218|   Book|\n|0313230269|   Book|\n|B00004W1W1|  Music|\n|1559362022|   Book|\n|0195110382|   Book|\n|0849311012|   Book|\n|B000007R0T|  Music|\n|078510870X|   Book|\n+----------+-------+\nonly showing top 20 rows\nscala> g2.vertices.show()\n+----------+-----+                                                            \n|       id| group|\n+----------+-----+\n|6303360041|Video|\n|B0000060T5|Video|\n|6304286961|Video|\n|B000063W82|Video|\n|B0000060TP|Video|\n|0970911300|Video|\n|B00000IBNZ|Video|\n|B00000IC8N|Video|\n|6303454488|Video|\n|B00005LAF3|Video|\n|6304733542|Video|\n|6301045734|Video|\n|6301967917|Video|\n|6304702329|Video|\n|0792296176|Video|\n|6301966422|Video|\n|B00000I9PH|Video|\n|6303864120|Video|\n|6304972857|Video|\n|6301701720|Video|\n+----------+-----+\nonly showing top 20 rows\n```", "```scala\nscala> g1.vertices.rdd.partitions.size\nres85: Int = 9\nscala> g2.vertices.rdd.partitions.size\nres86: Int = 11\n```", "```scala\nscala> g1.vertices.write.csv(\"file:///Users/aurobindosarkar/Downloads/g1/partitions\")\nscala> g2.vertices.write.csv(\"file:///Users/aurobindosarkar/Downloads/g2/partitions\")\n```", "```scala\nscala> val g2c = g2.vertices.coalesce(5)\nscala> g2c.rdd.partitions.size\nres90: Int = 5\n```"]