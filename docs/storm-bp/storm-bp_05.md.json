["```scala\n    Graph graph = new TinkerGraph();\n\n    Vertex bob = graph.addVertex(null);\n    bob.setProperty(\"name\", \"Bob\");\n    bob.setProperty(\"born\", 1980);\n    bob.setProperty(\"state\", \"Vermont\");\n\n    Vertex alice = graph.addVertex(null);\n    alice.setProperty(\"name\", \"Alice\");\n    alice.setProperty(\"born\", 1965);\n    alice.setProperty(\"state\", \"New York\");\n\n    Vertex ted = graph.addVertex(null);\n    ted.setProperty(\"name\", \"Ted\");\n    ted.setProperty(\"born\", 1970);\n    ted.setProperty(\"state\", \"Texas\");\n\n    Edge bobToAlice = graph.addEdge(null, bob, alice, \"Follows\");\n    bobToAlice.setProperty(\"since\", 2012);\n\n    Edge aliceToBob = graph.addEdge(null, alice, bob, \"Follows\");\n    aliceToBob.setProperty(\"since\", 2011);\n\n    Edge aliceToTed = graph.addEdge(null, alice, ted, \"Follows\");\n    aliceToTed.setProperty(\"since\", 2010);\n\n    graph.shutdown();\n```", "```scala\n./bin/gremlin.sh\n\n         \\,,,/\n         (o o)\n-----oOOo-(_)-oOOo-----\ngremlin>\ngremlin> g.V('name', 'Alice').outE('Follows').count()\n==>2\n```", "```scala\ng = new TinkerGraph()\nbob = g.addVertex()\nbob.name = \"Bob\"\nbob.born = 1980\nbob.state = \"Vermont\"\nalice = g.addVertex()\nalice.name = \"Alice\"\nalice.born=1965\nalice.state = \"New York\"\nted = g.addVertex()\nted.name = \"Ted\"\nted.born = 1970\nted.state = \"Texas\"\nbobToAlice = g.addEdge(bob, alice, \"Follows\")\nbobToAlice.since = 2012\naliceToBob = g.addEdge(alice, bob, \"Follows\")\naliceToBob.since = 2011\naliceToTed = g.addEdge(alice, ted, \"Follows\")\naliceToTed.since = 2010\n```", "```scala\nwget http://s3.thinkaurelius.com/downloads/titan/titan-all-0.3.2.zip\nunzip titan-all-0.3.2.zip\n\n```", "```scala\ncd titan-all-0.3.2/lib\nrm kryo*.jar\ncp $STORM_HOME/lib/kryo*.jar ./\n\n```", "```scala\n$ cd titan\n$ ./bin/gremlin.sh\n \\,,,/\n (o o)\n-----oOOo-(_)-oOOo-----\ngremlin> g = GraphOfTheGodsFactory.create('/tmp/storm-blueprints')\n==>titangraph[local:/tmp/storm-blueprints]\ngremlin> g.V.map\n==>{name=saturn, age=10000, type=titan}\n==>{name=sky, type=location}\n==>{name=sea, type=location}\n==>{name=jupiter, age=5000, type=god}\n==>{name=neptune, age=4500, type=god}\n==>{name=hercules, age=30, type=demigod}\n==>{name=alcmene, age=45, type=human}\n==>{name=pluto, age=4000, type=god}\n==>{name=nemean, type=monster}\n==>{name=hydra, type=monster}\n==>{name=cerberus, type=monster}\n==>{name=tartarus, type=location}\ngremlin>\n\n```", "```scala\ngremlin> g.class.name\n==>com.thinkaurelius.titan.graphdb.database.StandardTitanGraph\n\n```", "```scala\nwget http://www.apache.org/dyn/closer.cgi?path=/cassandra/1.2.9/apache-cassandra-1.2.9-bin.tar.gz\ntar -zxf ./cassandra-1.2.9.bin.tar.gz\ncd cassandra-1.2.9\n./bin/cassandra -f\n\n```", "```scala\nstorage.backend=cassandra\nstorage.hostname=localhost\n\n```", "```scala\n    <dependency>\n      <groupId>org.twitter4j</groupId>\n      <artifactId>twitter4j-core</artifactId>\n      <version>3.0.3</version>\n    </dependency>\n    <dependency>\n      <groupId>org.twitter4j</groupId>\n      <artifactId>twitter4j-stream</artifactId>\n      <version>3.0.3</version>\n    </dependency>\n```", "```scala\noauth.consumerKey=[your consumer key]\noauth.consumerSecret=[your consumer secret]\noauth.accessToken=[your access token]\noauth.accessTokenSecret=[your access token secret]\n```", "```scala\n    public static void main(String[] args) throws TwitterException, IOException {\n\n        StatusListener listener = new TwitterStatusListener();\n        TwitterStream twitterStream = new TwitterStreamFactory().getInstance();\n        twitterStream.addListener(listener);\n\n        FilterQuery query = new FilterQuery().track(args);\n        twitterStream.filter(query);\n\n    }\n```", "```scala\n    public static class TwitterStatusListener implements StatusListener {\n        public void onStatus(Status status) {\n\n            JSONObject tweet = new JSONObject();\n            tweet.put(\"user\", status.getUser().getScreenName());\n            tweet.put(\"name\", status.getUser().getName());\n            tweet.put(\"location\", status.getUser().getLocation());\n            tweet.put(\"text\", status.getText());\n\n            HashtagEntity[] hashTags = status.getHashtagEntities();\n            System.out.println(\"# HASH TAGS #\");\n            JSONArray jsonHashTags = new JSONArray();\n            for (HashtagEntity hashTag : hashTags) {\n                System.out.println(hashTag.getText());\n                jsonHashTags.add(hashTag.getText());\n            }\n            tweet.put(\"hashtags\", jsonHashTags);\n\n            System.out.println(\"@ USER MENTIONS @\");\n            UserMentionEntity[] mentions = status.getUserMentionEntities();\n            JSONArray jsonMentions = new JSONArray();\n            for (UserMentionEntity mention : mentions) {\n                System.out.println(mention.getScreenName());\n                jsonMentions.add(mention.getScreenName());\n            }\n            tweet.put(\"mentions\", jsonMentions);\n\n            URLEntity[] urls = status.getURLEntities();\n            System.out.println(\"$ URLS $\");\n            JSONArray jsonUrls = new JSONArray();\n            for (URLEntity url : urls) {\n                System.out.println(url.getExpandedURL());\n                jsonUrls.add(url.getExpandedURL());\n            }\n            tweet.put(\"urls\", jsonUrls);\n\n            if (status.isRetweet()) {\n                JSONObject retweetUser = new JSONObject();\n                retweetUser.put(\"user\", status.getUser().getScreenName());\n                retweetUser.put(\"name\", status.getUser().getName());\n                retweetUser.put(\"location\", status.getUser().getLocation());\n                tweet.put(\"retweetuser\", retweetUser);\n            }\n            KAFKA_LOG.info(tweet.toJSONString());\n        }\n\n        public void onDeletionNotice(StatusDeletionNotice statusDeletionNotice) {\n        }\n\n        public void onTrackLimitationNotice(int numberOfLimitedStatuses) {\n\n            System.out.println(\"Track Limitation Notice: \" + numberOfLimitedStatuses);\n        }\n\n        public void onException(Exception ex) {\n            ex.printStackTrace();\n        }\n\n        public void onScrubGeo(long arg0, long arg1) {\n        }\n\n        public void onStallWarning(StallWarning arg0) {\n\n        }\n    }\n```", "```scala\npublic class JsonProjectFunction extends BaseFunction {\n\n    private Fields fields;\n\n    public JsonProjectFunction(Fields fields) {\n        this.fields = fields;\n    }\n\n    public void execute(TridentTuple tuple, TridentCollector collector) {\n        String json = tuple.getString(0);\n        Map<String, Object> map = (Map<String, Object>) JSONValue.parse(json);\n        Values values = new Values();\n        for (int i = 0; i < this.fields.size(); i++) {\n            values.add(map.get(this.fields.get(i)));\n        }\n        collector.emit(values);\n    }\n\n}\n```", "```scala\nGraphFactory.java\npublic interface GraphFactory {\n    public Graph makeGraph(Map conf);\n}\n```", "```scala\npublic interface GraphTupleProcessor {\n\n    public void process(Graph g, TridentTuple tuple, TridentCollector collector);\n\n}\n```", "```scala\nGraphStateFactory.java\npublic class GraphStateFactory implements StateFactory {\n\n    private GraphFactory factory;\n\n    public GraphStateFactory(GraphFactory factory){\n        this.factory = factory;\n    }\n\n    public State makeState(Map conf, IMetricsContext metrics, int partitionIndex, int numPartitions) {\n        Graph graph = this.factory.makeGraph(conf);\n        State state = new GraphState(graph);\n        return state;\n    }\n\n}\n```", "```scala\nGraphState.java\npublic class GraphState implements State {\n\n    private Graph graph;\n\n    public GraphState(Graph graph){\n        this.graph = graph;\n    }\n\n    @Override\n    public void beginCommit(Long txid) {}\n\n    @Override\n    public void commit(Long txid) {\n        if(this.graph instanceof TransactionalGraph){\n            ((TransactionalGraph)this.graph).commit();\n        }\n    }\n\n    public void update(List<TridentTuple> tuples, TridentCollector collector, GraphTupleProcessor processor){\n        for(TridentTuple tuple : tuples){\n            processor.process(this.graph, tuple, collector);\n        }\n    }\n\n}\n```", "```scala\nGraphUpdater.java\npublic class GraphUpdater extends BaseStateUpdater<GraphState> {\n\n    private GraphTupleProcessor processor;\n\n    public GraphUpdater(GraphTupleProcessor processor){\n        this.processor = processor;\n    }\n\n    public void updateState(GraphState state, List<TridentTuple> tuples, TridentCollector collector) {\n        state.update(tuples, collector, this.processor);\n    }\n\n}\n```", "```scala\nTitanGraphFactory.java\npublic class TitanGraphFactory implements GraphFactory {\n\n    public static final String STORAGE_BACKEND = \"titan.storage.backend\";\n    public static final String STORAGE_HOSTNAME = \"titan.storage.hostname\";\n\n    public Graph makeGraph(Map conf) {\n        Configuration graphConf = new BaseConfiguration();\n        graphConf.setProperty(\"storage.backend\", conf.get(STORAGE_BACKEND));\n        graphConf.setProperty(\"storage.hostname\", conf.get(STORAGE_HOSTNAME));\n\n        return TitanFactory.open(graphConf);\n    }\n}\n```", "```scala\nTweetGraphTupleProcessor.java\npublic class TweetGraphTupleProcessor implements GraphTupleProcessor {\n    @Override\n    public void process(Graph g, TridentTuple tuple, TridentCollector collector) {\n        Long timestamp = tuple.getLong(0);\n        JSONObject json = (JSONObject)tuple.get(1);\n\n        Vertex user = findOrCreateUser(g, (String)json.get(\"user\"), (String)json.get(\"name\"));\n\n        JSONArray hashtags = (JSONArray)json.get(\"hashtags\");\n        for(int i = 0; i < hashtags.size(); i++){\n            Vertex v = findOrCreateVertex(g, \"hashtag\", ((String)hashtags.get(i)).toLowerCase());\n            createEdgeAtTime(g, user, v, \"mentions\", timestamp);\n        }\n\n    }\n}\n```", "```scala\npublic class TwitterGraphTopology {\n    public static StormTopology buildTopology() {\n        TridentTopology topology = new TridentTopology();\n\n        StaticHosts kafkaHosts = StaticHosts.fromHostString(Arrays.asList(new String[] { \"localhost\" }), 1);\n        TridentKafkaConfig spoutConf = new TridentKafkaConfig(kafkaHosts, \"twitter-feed\");\n        spoutConf.scheme = new StringScheme();\n        spoutConf.forceStartOffsetTime(-2);\n        OpaqueTridentKafkaSpout spout = new OpaqueTridentKafkaSpout(spoutConf);\n\n        Stream spoutStream = topology.newStream(\"kafka-stream\", spout);\n\n        Fields jsonFields = new Fields(\"timestamp\", \"message\");\n        Stream parsedStream = spoutStream.each(spoutStream.getOutputFields(), new JsonProjectFunction(jsonFields), jsonFields);\n        parsedStream = parsedStream.project(jsonFields);\n        // Trident State\n        GraphFactory graphFactory = new TitanGraphFactory();\n        GraphUpdater graphUpdater = new GraphUpdater(new TweetGraphTupleProcessor());\n\n        StateFactory stateFactory = new GraphStateFactory(graphFactory);\n        parsedStream.partitionPersist(stateFactory, parsedStream.getOutputFields(), graphUpdater, new Fields());\n\n        return topology.build();\n    }\n\n    public static void main(String[] args) throws Exception {\n        Config conf = new Config();\n        conf.put(TitanGraphFactory.STORAGE_BACKEND, \"cassandra\");\n        conf.put(TitanGraphFactory.STORAGE_HOSTNAME, \"localhost\");\n\n        conf.setMaxSpoutPending(5);\n        if (args.length == 0) {\n            LocalCluster cluster = new LocalCluster();\n            cluster.submitTopology(\"twitter-analysis\", conf, buildTopology());\n\n        } else {\n            conf.setNumWorkers(3);\n            StormSubmitter.submitTopology(args[0], conf, buildTopology());\n        }\n    }\n}\n```", "```scala\njava TwitterStreamConsumer bigdata hadoop\n```", "```scala\n$ cd titan\n$ ./bin/gremlin.sh\n          \\,,,/\n         (o o)\n-----oOOo-(_)-oOOo-----\ngremlin> conf = new BaseConfiguration()\ngremlin> conf.setProperty('storage.backend', 'cassandra')\ngremlin> conf.setProperty('storage.hostname', 'localhost')\ngremlin> g = TitanFactory.open(conf)\n```", "```scala\n    gremlin> g.V('type', 'hashtag').has('value', 'hadoop').in.userid.groupCount.cap\n\n    ```", "```scala\n    gremlin> g.V.has('type', 'hashtag').has('value', 'java').inE.count()\n\n    ```"]