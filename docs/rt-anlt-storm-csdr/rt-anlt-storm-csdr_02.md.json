["```scala\n    Linux-command-Prompt $ sudo git clone git://github.com/apache/incubator-storm.git && cd incubator-storm/examples/storm-starter\n\n    ```", "```scala\n// instantiates the new builder object\nTopologyBuilder builder = new TopologyBuilder();\n// Adds a new spout of type \"RandomSentenceSpout\" with a  parallelism hint of 5\nbuilder.setSpout(\"spout\", new RandomSentenceSpout(), 5);\n```", "```scala\nTopologyBuilder object and used the template to perform the following:\n```", "```scala\n    sudo mkdir /usr/local/zookeeper\n\n    ```", "```scala\n    sudo tar -xvf zookeeper-3.3.5.tar.gz -C /usr/local/zookeeper\n\n    ```", "```scala\n    sudo mkdir \u2013p /usr/local/zookeeper/tmp\n\n    ```", "```scala\n    source ~/.bashrc\n\n    ```", "```scala\n    sudo \u2013E bin/zkServer.sh start\n\n    ```", "```scala\n    sudo \u2013E bin/zkServer.sh stop\n\n    ```", "```scala\n    sudo \u2013E bin/zkServer.sh status\n\n    ```", "```scala\n    sudo mkdir \u2013p /usr/local/storm/tmp\n\n    ```", "```scala\n    sudo mkdir \u2013p /mnt/abc_logs/storm/storm_logs\n\n    ```", "```scala\n    sudo unzip -d /usr/local/storm/ storm-0.9.2 -incubating.zip\n\n    ```", "```scala\n        storm.zookeeper.servers:\n         \"<IP_ADDRESS_OF_ZOOKEEPER_ENSEMBLE_NODE_1>\"\n         \"<IP_ADDRESS_OF_ZOOKEEPER_ENSEMBLE_NODE_2>\"\n        ```", "```scala\n        storm.zookeeper.port: 2182\n        ```", "```scala\n        storm.local.dir: \"/usr/local/storm/tmp\"\n        ```", "```scala\n        nimbus.host: \"<IP_ADDRESS_OF_NIMBUS_HOST>\"\n        ```", "```scala\n        storm.messaging.transport:\"backtype.storm.messaging.netty.Context\"\n                   storm.messaging.netty.server_worker_threads:1\n                   storm.messaging.netty.client_worker_threads:1\n                   storm.messaging.netty.buffer_size:5242880\n                   storm.messaging.netty.max_retries:100\n                   storm.messaging.netty.max_wait_ms:1000\n                   storm.messaging.netty.min_wait_ms:100\n        ```", "```scala\n        #To be filled in for a storm configuration\n        storm.zookeeper.servers:\n             - \"nim-zkp-flm-3.abc.net\"\n        storm.zookeeper.port: 2182\n        storm.local.dir: \"/usr/local/storm/tmp\"\n        nimbus.host: \"nim-zkp-flm-3.abc.net\"\n        topology.message.timeout.secs: 60\n        topology.debug: false\n        topology.optimize: true\n        topology.ackers: 4\n\n        storm.messaging.transport: \"backtype.storm.messaging.netty.Context\"\n        storm.messaging.netty.server_worker_threads: 1\n        storm.messaging.netty.client_worker_threads: 1\n        storm.messaging.netty.buffer_size: 5242880\n        storm.messaging.netty.max_retries: 100\n        storm.messaging.netty.max_wait_ms: 1000\n        storm.messaging.netty.min_wait_ms: 100\n        ```", "```scala\n    sudo cp /usr/local/storm/storm-0.9.2- incubating/conf/storm.yaml /usr/local/storm/storm-0.8.2/bin/\n\n    ```", "```scala\n    sudo \u2013bE bin/storm nimbus\n\n    ```", "```scala\n    sudo \u2013bE bin/storm supervisor\n\n    ```", "```scala\n    sudo \u2013bE bin/storm ui\n\n    ```", "```scala\nstorm jar storm-starter-0.0.1-SNAPSHOT-jar-with-dependencies.jar  storm.starter.WordCountTopology WordCount -c nimbus.host=localhost\n\n```", "```scala\n    public static class FileWriterBolt extends BaseBasicBolt {\n        Map<String, Integer> counts = new HashMap<String,  Integer>();\n        @Override\n        public void execute(Tuple tuple, BasicOutputCollector  collector) {\n            String word = tuple.getString(0);\n            Integer count = counts.get(word);\n            if(count==null) {count = 0;\n            count = 0;\n        }\n            count++;\n            counts.put(word, count);\n            OutputStream ostream;\n            try {\n                ostream = new  FileOutputStream(\"~/wordCount.txt\", true);\n                ostream.write(word.getBytes());\n                ostream.close();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n            collector.emit(new Values(word, count));\n        }\n\n        @Override\n        public void declareOutputFields(OutputFieldsDeclarer  declarer) {\n            declarer.declare(new Fields(\"word\", \"count\"));\n        }\n    ```", "```scala\n    // instantiates the new builder object \n    TopologyBuilder builder = new TopologyBuilder();\n    // Adds a new spout of type \"RandomSentenceSpout\" with a  parallelism hint of 5 \n    builder.setSpout(\"spout\", new RandomSentenceSpout(), 5);\n    //Adds a new bolt to the  topology of type \"SplitSentence\"  with parallelism of 8\n    builder.setBolt(\"split\", new SplitSentence(),  8).shuffleGrouping(\"spout\");\n    //Adds a new bolt to the  topology of type \"SplitSentence\"  with parallelism of 8\n    //builder.setBolt(\"count\", new FileWriterBolt()(),  12).fieldsGrouping(\"split\", new Fields(\"word\"));\n    ```", "```scala\n        mvn clean install\n\n        ```", "```scala\n        storm jar /home/admin/topology/storm-starter-0.0.1-SNAPSHOT- jar-with-dependencies.jar storm.starter.WordCountTopology  WordCount -c nimbus.host=localhost\n\n        ```"]