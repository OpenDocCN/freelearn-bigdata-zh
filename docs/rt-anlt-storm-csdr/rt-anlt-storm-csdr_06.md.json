["```scala\n    CREATE TABLE statusUpdates(\n      update_id uuid PRIMARY KEY,\n      username varchar,\n      mesage varchar\n      );\n\n    CREATE TABLE timeseriesTable (\n      user_id varchar,\n      udate_id uuid,\n      username varchar,\n      mesage varchar,\n      PRIMARY KEY user_id , update_id )\n    );\n    ```", "```scala\n    sudo mkdir /usr/local/cassandra\n\n    ```", "```scala\n    sudo tar \u2013xvf apache-cassandra-1.1.6-bin.tar.gz -C  /usr/local/cassandra\n\n    ```", "```scala\n    sudo mkdir \u2013p /usr/local/cassandra/tmp\n\n    ```", "```scala\n    cluster_name: 'MyClusterName'\n    seeds: <IP of Node-1><IP of Node-2>(IP address of each node  go into it)\n    listen_address: <IP of Current Node>\n    ```", "```scala\n    #! /usr/bin/python\n    import sys\n    if (len(sys.argv) > 1):\n      num=int(sys.argv[1])\n    else:\n      num=int(raw_input(\"How many nodes are in your cluster? \"))\n    for i in range(0, num):\n      print 'node %d: %d' % (i, (i*(2**127)/num))\n    ```", "```scala\n    Log4j.appender.R.File=/usr/local/cassandra/temp/system.log\n\n    ```", "```scala\n    bin/nodetool \u2013host <ip-adress> -p <port number> ring \n    192.168.1.30 datacenter1 rack1 Up    Normal 755.25 MB  25.00% 0\n    192.168.1.31 datacenter1 rack1 Up    Normal 400.62 MB  25.00% 42535295865117307932921825928970\n    192.168.1.51 datacenter1 rack1 Up    Normal 400.62 MB  25.00% 42535295865117307932921825928971\n    192.168.1.32 datacenter1 rack1 Up    Normal 793.06 MB  25.00% 85070591730234615865843651857941\n    ```", "```scala\n    $ ps auwx | grep cassandra \n\n    ```", "```scala\n    $ sudo kill <pid> \n\n    ```", "```scala\n    $ sudo rm -rf /var/lib/cassandra/*\n\n    ```", "```scala\n    endpoint_snitch <provide the name of snitch> \n      initial_token: <provide the value of token from previous  step>\n      seeds: <provide internal IP_address of each seed node>\n      listen_address: <provide localhost IP address>\n    ```", "```scala\n    node0:\n    end_point_snitch:  org.apache.cassandra.locator.PropertyFileSnitch\n    initial_token: 0\n    seed_provider:\n      - class_name:  org.apache.cassandra.locator.SimpleSeedProvider\n      parameters:\n      - seeds: \"10.188.66.41,10.196.170.59\"\n      listen_address: 10.196.43.66\n      node1 to node5\n    ```", "```scala\n    # Cassandra Node IP=Data Center:Rack\n    10.188.66.41=Dc1:Rc1\n    10.196.43.66=Dc2:Rc1\n    10.188.247.41=Dc1:Rc1\n    10.196.170.59=Dc2:Rc1\n    10.189.61.170=Dc1:Rc1\n    10.199.30.138=Dc2:Rc1\n    ```", "```scala\n    bin/cqlsh  \u2013host <ip-adress> -p <port number>\n\n    ```", "```scala\n    create keyspace <keyspace_name>; \n\n    ```", "```scala\n    use <keyspace_name>;\n    create column family <columnfamily name>;\n\n    ```", "```scala\n    CREATE TABLE appUSers (\n     user_name varchar,\n     Dept varchar,\n     email varchar,\n     PRIMARY KEY (user_name));\n\n    ```", "```scala\n    INSERT INTO appUSers (user_name, Dept, email)\n     VALUES ('shilpi', 'bigdata, 'shilpisaxena@yahoo.com');\n\n    ```", "```scala\n    SELECT * FROM appUSers LIMIT 10;\n\n    ```", "```scala\n    Cd Cassandra-installation-dir/bin\n    cassandra-cli -host localhost -port 9160\n\n    ```", "```scala\n    [default@unknown] CREATE KEYSPACE myKeySpace\n    with placement_strategy = 'SimpleStrategy'\n    and strategy_options = {replication_factor:1};\n\n    ```", "```scala\n    [default@unknown] SHOW KEYSPACES;\n     Durable Writes: true\n     Options: [replication_factor:3]\n     Column Families:\n     ColumnFamily: MyEntries\n     Key Validation Class:  org.apache.cassandra.db.marshal.UTF8Type\n     Default column value validator:  org.apache.cassandra.db.marshal.UTF8Type\n     Columns sorted by:  org.apache.cassandra.db.marshal.ReversedType (org.apache.cassandra.db.marshal.TimeUUIDType)\n     GC grace seconds: 0\n     Compaction min/max thresholds: 4/32\n     Read repair chance: 0.1\n     DC Local Read repair chance: 0.0\n     Replicate on write: true\n     Caching: KEYS_ONLY\n     Bloom Filter FP chance: default\n     Built indexes: []\n     Compaction Strategy:  org.apache.cassandra.db.compaction. SizeTieredCompactionStrategy\n     Compression Options:\n     sstable_compression:  org.apache.cassandra.io.compress.SnappyCompressor\n     ColumnFamily: MYDevicesEntries\n     Key Validation Class:  org.apache.cassandra.db.marshal.UUIDType\n     Default column value validator:  org.apache.cassandra.db.marshal.UTF8Type\n     Columns sorted by:  org.apache.cassandra.db.marshal.UTF8Type\n     GC grace seconds: 0\n     Compaction min/max thresholds: 4/32\n     Read repair chance: 0.1\n     DC Local Read repair chance: 0.0\n     Replicate on write: true\n     Caching: KEYS_ONLY\n     Bloom Filter FP chance: default\n     Built indexes:  [sidelinedDevicesEntries. sidelinedDevicesEntries_date_created_idx,  sidelinedDevicesEntries. sidelinedDevicesEntries_event_type_idx]\n     Column Metadata:\n     Column Name: event_type\n     Validation Class:  org.apache.cassandra.db.marshal.UTF8Type\n     Index Name: sidelinedDevicesEntries_event_type_idx\n     Index Type: KEYS\n     Index Options: {}\n     Column Name: date_created\n     Validation Class:  org.apache.cassandra.db.marshal.DateType\n     Index Name: sidelinedDevicesEntries_date_created_idx\n     Index Type: KEYS\n     Index Options: {}\n     Column Name: event\n     Validation Class:  org.apache.cassandra.db.marshal.UTF8Type\n     Compaction Strategy:  org.apache.cassandra.db.compaction. SizeTieredCompactionStrategy\n     Compression Options:\n     sstable_compression:  org.apache.cassandra.io.compress.SnappyCompressor\n\n    ```", "```scala\n    [default@unknown] USE myKeySpace;\n     [default@demo] CREATE COLUMN FAMILY appUsers\n     WITH comparator = UTF8Type\n     AND key_validation_class=UTF8Type\n     AND column_metadata = [\n     {column_name:user_name, validation_class: UTF8Type}\n     {column_name: Dept, validation_class: UTF8Type}\n     {column_name: email, validation_class: UTF8Type}\n    ];\n\n    ```", "```scala\n    [default@demo] SET appUsers['SS'][user_name']='shilpi';\n     [default@demo] SET appUsers['ss'][Dept]='BigData';\n     [default@demo] SET  appUsers['ss']['email']=shilpisaxena@yahoo.com';\n\n    ```", "```scala\n    GET appUsers[utf8('ss')][utf8('user_name')];\n    List appUsers;\n\n    ```", "```scala\n    create keyspace my_keyspace with placement_strategy = 'SimpleStrategy' and strategy_options = {replication_factor : 3} and durable_writes = true;\n     use my_keyspace;\n\n    ```", "```scala\n    create column family my_columnfamily\n      with column_type = 'Standard'\n      and comparator = 'UTF8Type'\n      and default_validation_class = 'BytesType'\n      and key_validation_class = 'TimeUUIDType'\n      and read_repair_chance = 0.1\n      and dclocal_read_repair_chance = 0.0\n      and gc_grace = 0\n      and min_compaction_threshold = 4\n      and max_compaction_threshold = 32\n      and replicate_on_write = true\n      and compaction_strategy =  'org.apache.cassandra.db.compaction. SizeTieredCompactionStrategy'\n      and caching = 'KEYS_ONLY'\n      and bloom_filter_fp_chance = 0.5\n      and column_metadata = [\n    {column_name : 'cellnumber',\n      validation_class : Int32Type },\n      {column_name : 'tollchrg',\n      validation_class : UTF8Type},\n    {column_name : 'msgres',\n      validation_class : UTF8Type},\n\n    {column_name : 'servicetype',\n      validation_class : UTF8Type}]\n      and compression_options = {'sstable_compression' :  'org.apache.cassandra.io.compress.SnappyCompressor'\n    };\n    ```", "```scala\n      <dependency>\n        <groupId>me.prettyprint</groupId>\n        <artifactId>hector-core</artifactId>\n        <version>0.8.0-2</version>\n      </dependency>\n    ```", "```scala\n    public class CassandraController {\n\n      private static final Logger logger =  LogUtils.getLogger(CassandraManager.class);\n      //various serializers are declared in here\n      UUIDSerializer timeUUIDSerializer = UUIDSerializer.get();\n      StringSerializer stringSerializer =  StringSerializer.get();\n      DateSerializer dateSerializer = DateSerializer.get();\n      LongSerializer longSerializer = LongSerializer.get();\n\n      public CassandraController() {\n          //list of IPs of Cassandra node in ring\n          String nodes =  \"10.3.1.41,10.3.1.42,10.3.1.44,10.3.1.45\";\n          String clusterName = \"mycluster\";\n          //creating a new configurator\n          CassandraHostConfigurator hostConfigurator = new  CassandraHostConfigurator(nodes);\n          hostConfigurator.setCassandraThriftSocketTimeout(0);\n          cluster = HFactory.getOrCreateCluster(clusterName,  hostConfigurator);\n\n          String[] nodeList = nodes.split(\",\");\n          if (nodeList != null && nodeList.length ==  cluster.getConnectionManager(). getDownedHosts().size()) {\n            logger.error(\"All cassandra nodes are down. \" +  nodes);\n          }\n\n          //setting up read and write consistencies\n          ConfigurableConsistencyLevel consistency = new  ConfigurableConsistencyLevel();\n          consistency.setDefaultWriteConsistencyLevel (HConsistencyLevel.ONE);\n          consistency.setDefaultReadConsistencyLevel (HConsistencyLevel.ONE);\n          keySpaceObj = HFactory.createKeyspace (\"my_keyspace\", cluster, consistency);\n          stringMutator = HFactory.createMutator(keySpaceObj, stringSerializer);\n          uuidMutator = HFactory.createMutator (keySpaceObj, timeUUIDSerializer);\n\n          logger.info(\"Cassandra data store initialized,  Nodes=\" + nodes + \", \" + \"cluster name=\" +  clusterName + \", \" + \"keyspace=\" + keyspace + \", \" +  \"consistency=\" + writeConsistency);\n        }\n        //defining the mutator \n      public Mutator < Composite > getCompositeMutator() {\n        return compositeMutator;\n      }\n\n      public void setCompositeMutator(Mutator < Composite >  compositeMutator) {\n          this.compositeMutator = compositeMutator;\n        }\n        //getter and setters for all mutators and serializers\n\n      public StringSerializer getStringSerializer() {\n        return stringSerializer;\n      }\n\n      public Keyspace getKeyspace() {\n        return keySpaceObj;\n      }\n    }\n    ```", "```scala\n    public class CassandraBolt extends BaseBasicBolt {\n      private static final Logger logger =  LogUtils.getLogger(CassandraBolt.class);\n\n      public void prepare(Map stormConf, TopologyContext  context) {\n\n        logger.debug(\"Cassandra bolt, prepare()\");\n        try {\n          cassandraMngr = new CassandraController();\n          myCf = \"my_columnfamily\";\n          );\n\n        } catch (Exception e) {\n          logger.error(\"Error while instantiating  CassandraBolt\", e);\n          throw new RuntimeException(e);\n        }\n      }\n\n      @Override\n      public void execute(Tuple input, BasicOutputCollector  collector) {\n        logger.debug(\"execute method :: Start \");\n          Calendar tCalendar = null;\n          long eventts = eventObj.getEventTimestampMillis();\n          com.eaio.uuid.UUID uuid = new  com.eaio.uuid.UUID(getTimeForUUID(eventts),  clockSeqAndNode);\n\n      java.util.UUID keyUUID =  java.util.UUID.fromString(uuid.toString());\n\n      /*\n      * Persisting to my CF\n      */\n\n      try {\n        if (keyUUID != null) {\n            cassandraMngrTDR.getUUIDMutator().addInsertion(\n                keyUUID,\n                myCf,\n                HFactory.createColumn(\"eventts\",\n                    new Timestamp(tCalendar.getTimeInMillis()),  -1, cassandraMngr.getStringSerializer(),\n                    cassandraMngr.getDateSerializer()));\n         }\n\n      cassandraMngrTDR.getUUIDMutator().addInsertion(\n        keyUUID,\n        myCf,\n        HFactory.createColumn(\"cellnumber\",  eventObj.getCellnumber(), -1,  cassandraMngr.getStringSerializer(),\n          cassandraMngr.getLongSerializer()));\n          cassandraMngr.getUUIDMutator().execute();\n      logger.debug(\"CDR event with key = \" + keyUUID + \"  inserted into Cassandra cf \" + myCf);\n\n      } else {\n      logger.error(\"Record not saved. Error while parsing date  to generate KEY for cassandra data store, column family -  \" + myCf);\n        }\n      }\n\n      catch (Exception excep) {\n      logger.error(\"Record not saved. Error while saving data  to cassandra data store, column family - \" + myCf,  excep);\n      }\n\n       logger.debug(\"execute method :: End \");\n      }\n    }\n    ```"]