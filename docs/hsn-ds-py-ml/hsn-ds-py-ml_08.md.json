["```py\nimport numpy as np \nfrom sklearn import cross_validation \nfrom sklearn import datasets \nfrom sklearn import svm \n\niris = datasets.load_iris() \n\n# Split the iris data into train/test data sets with \n#40% reserved for testing \nX_train, X_test, y_train, y_test = cross_validation.train_test_split(iris.data, \n                                    iris.target, test_size=0.4, random_state=0) \n\n# Build an SVC model for predicting iris classifications \n#using training data \nclf = svm.SVC(kernel='linear', C=1).fit(X_train, y_train) \n\n# Now measure its performance with the test data \nclf.score(X_test, y_test) \n\n```", "```py\n# We give cross_val_score a model, the entire data set and its \"real\" values, and the number of folds: \nscores = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5) \n\n# Print the accuracy for each fold: \nprint scores \n\n# And the mean accuracy of all 5 folds: \nprint scores.mean() \n\n```", "```py\nclf = svm.SVC(kernel='poly', C=1).fit(X_train, y_train)\nscores = cross_validation.cross_val_score(clf, iris.data, iris.target, cv=5)\nprint scores\nprint scores.mean()\n\n```", "```py\nlogPath = \"E:\\\\sundog-consult\\\\Packt\\\\DataScience\\\\access_log.txt\" \n\n```", "```py\nformat_pat= re.compile( \n    r\"(?P<host>[\\d\\.]+)\\s\" \n    r\"(?P<identity>\\S*)\\s\" \n    r\"(?P<user>\\S*)\\s\" \n    r\"\\[(?P<time>.*?)\\]\\s\" \n    r'\"(?P<request>.*?)\"\\s' \n    r\"(?P<status>\\d+)\\s\" \n    r\"(?P<bytes>\\S*)\\s\" \n    r'\"(?P<referer>.*?)\"\\s' \n    r'\"(?P<user_agent>.*?)\"\\s*' \n) \n\n```", "```py\nURLCounts = {}\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            request = access['request']\n            (action, URL, protocol) = request.split()\n            if URLCounts.has_key(URL):\n                URLCounts[URL] = URLCounts[URL] + 1\n            else:\n                URLCounts[URL] = 1\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nURLCounts = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            request = access['request']\n            fields = request.split()\n            if (len(fields) != 3):\n                print fields\n\n```", "```py\nURLCounts = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            request = access['request']\n            fields = request.split()\n            if (len(fields) == 3):\n                URL = fields[1]\n                if URLCounts.has_key(URL):\n                    URLCounts[URL] = URLCounts[URL] + 1\n                else:\n                    URLCounts[URL] = 1\n\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nURLCounts = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            request = access['request']\n            fields = request.split()\n            if (len(fields) == 3):\n                (action, URL, protocol) = fields\n                if (action == 'GET'):\n                    if URLCounts.has_key(URL):\n                        URLCounts[URL] = URLCounts[URL] + 1\n                    else:\n                        URLCounts[URL] = 1\n\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nUserAgents = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            agent = access['user_agent']\n            if UserAgents.has_key(agent):\n                UserAgents[agent] = UserAgents[agent] + 1\n            else:\n                UserAgents[agent] = 1\n\nresults = sorted(UserAgents, key=lambda i: int(UserAgents[i]), reverse=True)\n\nfor result in results:\n    print result + \": \" + str(UserAgents[result])\n\n```", "```py\nURLCounts = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            agent = access['user_agent']\n            if (not('bot' in agent or 'spider' in agent or \n                    'Bot' in agent or 'Spider' in agent or\n                    'W3 Total Cache' in agent or agent =='-')):\n                request = access['request']\n                fields = request.split()\n                if (len(fields) == 3):\n                    (action, URL, protocol) = fields\n                    if (action == 'GET'):\n                        if URLCounts.has_key(URL):\n                            URLCounts[URL] = URLCounts[URL] + 1\n                        else:\n                            URLCounts[URL] = 1\n\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nURLCounts = {}\n\nwith open(logPath, \"r\") as f:\n    for line in (l.rstrip() for l in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            agent = access['user_agent']\n            if (not('bot' in agent or 'spider' in agent or \n                    'Bot' in agent or 'Spider' in agent or\n                    'W3 Total Cache' in agent or agent =='-')):\n                request = access['request']\n                fields = request.split()\n                if (len(fields) == 3):\n                    (action, URL, protocol) = fields\n                    if (URL.endswith(\"/\")):\n                        if (action == 'GET'):\n                            if URLCounts.has_key(URL):\n                                URLCounts[URL] = URLCounts[URL] + 1\n                            else:\n                                URLCounts[URL] = 1\n\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nURLCounts = {}\n\nwith open (logPath, \"r\") as f:\n    for line in (l.rstrip() for 1 in f):\n        match= format_pat.match(line)\n        if match:\n            access = match.groupdict()\n            agent = access['user_agent']\n            if (not('bot' in agent or 'spider' in agent or\n                    'Bot' in agent or 'Spider' in agent or\n                    'W3 Total Cache' in agent or agent =='-')):\n                request = access['request']\n                fields = request.split()\n                if (len(fields) == 3):\n                    (action, URL, protocol) = fields\n                    if (URL.endswith(\"/\")):\n                        if (action == 'GET'):\n                            if URLCounts.has_key(URL):\n                                URLCounts[URL] = URLCounts[URL] + 1\n                            else:\n                                URLCounts[URL] = 1\n\nresults = sorted(URLCounts, key=lambda i: int(URLCounts[i]), reverse=True)\n\nfor result in results[:20]:\n    print result + \": \" + str(URLCounts[result])\n\n```", "```py\nimport numpy as np\n\nincomes = np.random.normal(27000, 15000, 10000)\nincomes = np.append(incomes, [1000000000])\n\nimport matplotlib.pyplot as plt\nplt.hist(incomes, 50)\nplt.show()\n\n```", "```py\nincomes.mean ()\n\n```", "```py\n126892.66469341301\n\n```", "```py\ndef reject_outliers(data): \n    u = np.median(data) \n    s = np.std(data) \n    filtered = [e for e in data if (u - 2 * s < e < u + 2 * s)] \n    return filtered \n\nfiltered = reject_outliers(incomes) \n\nplt.hist(filtered, 50) \nplt.show() \n\n```"]