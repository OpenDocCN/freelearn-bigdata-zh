["```py\n%matplotlib inline \n\nfrom scipy.stats import norm \nimport matplotlib.pyplot as plt \nimport numpy as np \n\nx = np.arange(-3, 3, 0.001) \n\nplt.plot(x, norm.pdf(x)) \nplt.show() \n\n```", "```py\nplt.plot(x, norm.pdf(x)) \nplt.plot(x, norm.pdf(x, 1.0, 0.5)) \nplt.show() \n\n```", "```py\nplt.plot(x, norm.pdf(x)) \nplt.plot(x, norm.pdf(x, 1.0, 0.5)) \nplt.savefig('C:\\\\Users\\\\Frank\\\\MyPlot.png', format='png') \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \nplt.plot(x, norm.pdf(x)) \nplt.plot(x, norm.pdf(x, 1.0, 0.5)) \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.plot(x, norm.pdf(x)) \nplt.plot(x, norm.pdf(x, 1.0, 0.5)) \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.plot(x, norm.pdf(x), 'b-') \nplt.plot(x, norm.pdf(x, 1.0, 0.5), 'r:') \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.plot(x, norm.pdf(x), 'b-') \nplt.plot(x, norm.pdf(x, 1.0, 0.5), 'r--') \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.plot(x, norm.pdf(x), 'b-') \nplt.plot(x, norm.pdf(x, 1.0, 0.5), 'r-.') \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.plot(x, norm.pdf(x), 'b-') \nplt.plot(x, norm.pdf(x, 1.0, 0.5), ' g:') \nplt.show() \n\n```", "```py\naxes = plt.axes() \naxes.set_xlim([-5, 5]) \naxes.set_ylim([0, 1.0]) \naxes.set_xticks([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) \naxes.set_yticks([0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) \naxes.grid() \nplt.xlabel('Greebles') \nplt.ylabel('Probability') \nplt.plot(x, norm.pdf(x), 'b-') \nplt.plot(x, norm.pdf(x, 1.0, 0.5), 'r:') \nplt.legend(['Sneetches', 'Gacks'], loc=4) \nplt.show() \n\n```", "```py\nplt.xkcd() \n\nfig = plt.figure() \nax = fig.add_subplot(1, 1, 1) \nax.spines['right'].set_color('none') \nax.spines['top'].set_color('none') \nplt.xticks([]) \nplt.yticks([]) \nax.set_ylim([-30, 10]) \n\ndata = np.ones(100) \ndata[70:] -= np.arange(30) \n\nplt.annotate( \n    'THE DAY I REALIZED\\nI COULD COOK BACON\\nWHENEVER I WANTED', \n    xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10)) \n\nplt.plot(data) \n\nplt.xlabel('time') \nplt.ylabel('my overall health') \n\n```", "```py\n# Remove XKCD mode: \nplt.rcdefaults() \n\nvalues = [12, 55, 4, 32, 14] \ncolors = ['r', 'g', 'b', 'c', 'm'] \nexplode = [0, 0, 0.2, 0, 0] \nlabels = ['India', 'United States', 'Russia', 'China', 'Europe'] \nplt.pie(values, colors= colors, labels=labels, explode = explode) \nplt.title('Student Locations') \nplt.show() \n\n```", "```py\nvalues = [12, 55, 4, 32, 14] \ncolors = ['r', 'g', 'b', 'c', 'm'] \nplt.bar(range(0,5), values, color= colors) \nplt.show() \n\n```", "```py\nfrom pylab import randn \n\nX = randn(500) \nY = randn(500) \nplt.scatter(X,Y) \nplt.show() \n\n```", "```py\nincomes = np.random.normal(27000, 15000, 10000) \nplt.hist(incomes, 50) \nplt.show() \n\n```", "```py\nuniformSkewed = np.random.rand(100) * 100 - 40 \nhigh_outliers = np.random.rand(10) * 50 + 100 \nlow_outliers = np.random.rand(10) * -50 - 100 \ndata = np.concatenate((uniformSkewed, high_outliers, low_outliers)) \nplt.boxplot(data) \nplt.show() \n\n```", "```py\n%matplotlib inline \n\nimport numpy as np \nfrom pylab import * \n\ndef de_mean(x): \n    xmean = mean(x) \n    return [xi - xmean for xi in x] \n\ndef covariance(x, y): \n    n = len(x) \n    return dot(de_mean(x), de_mean(y)) / (n-1) \n\n```", "```py\npageSpeeds = np.random.normal(3.0, 1.0, 1000) \npurchaseAmount = np.random.normal(50.0, 10.0, 1000) \n\nscatter(pageSpeeds, purchaseAmount) \n\ncovariance (pageSpeeds, purchaseAmount) \n\n```", "```py\npurchaseAmount = np.random.normal(50.0, 10.0, 1000) / pageSpeeds \n\nscatter(pageSpeeds, purchaseAmount) \n\ncovariance (pageSpeeds, purchaseAmount) \n\n```", "```py\ndef correlation(x, y): \nstddevx = x.std() \nstddevy = y.std() \nreturn covariance(x,y) / stddevx / stddevy  #In real life you'd check for divide by zero here \n\ncorrelation(pageSpeeds, purchaseAmount) \n\n```", "```py\nnp.corrcoef(pageseeds, purchaseAmount) \n\n```", "```py\narray([(1\\.         ,-046728788], \n      [-0.46728788], 1\\.       ]) \n\n```", "```py\npurchaseAmount = 100 - pageSpeeds * 3 \n\nscatter(pageSpeeds, purchaseAmount) \n\ncorrelation (pageSpeeds, purchaseAmount) \n\n```", "```py\nfrom numpy import random \nrandom.seed(0) \n\ntotals = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \npurchases = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \ntotalPurchases = 0 \nfor _ in range(100000): \n    ageDecade = random.choice([20, 30, 40, 50, 60, 70]) \n    purchaseProbability = float(ageDecade) / 100.0 \n    totals[ageDecade] += 1 \n    if (random.random() < purchaseProbability): \n        totalPurchases += 1 \n        purchases[ageDecade] += 1 \n\n```", "```py\nPEF = float(purchases[30]) / float(totals[30]) \n\n```", "```py\nprint (\"P(purchase | 30s): \", PEF) \n\n```", "```py\nP(purchase | 30s): 0.2992959865211 \n\n```", "```py\nprint \"p(purchase | 30s): \", PEF \n\n```", "```py\nPF = float(totals[30]) / 100000.0 \nprint (\"P(30's): \", PF) \n\n```", "```py\nP(30's): 0.16619 \n\n```", "```py\nPE = float(totalPurchases) / 100000.0 \nprint (\"P(Purchase):\", PE) \n\nP(Purchase): 0.45012 \n\n```", "```py\nprint (\"P(30's)P(Purchase)\", PE * PF) \n\nP(30's)P(Purchase) 0.07480544280000001 \n\n```", "```py\nprint (\"P(30's, Purchase)\", float(purchases[30]) / 100000.0) \nP(30's, Purchase) 0.04974 \n\n```", "```py\n(float(purchases[30]) / 100000.0) / PF  \n\n```", "```py\nOut []:0.29929598652145134 \n\n```", "```py\nfrom numpy import random \nrandom.seed(0) \n\ntotals = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \npurchases = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \ntotalPurchases = 0 \nfor _ in range(100000): \nageDecade = random.choice([20, 30, 40, 50, 60, 70]) \npurchaseProbability = 0.4 \ntotals[ageDecade] += 1 \nif (random.random() < purchaseProbability): \ntotalPurchases += 1 \npurchases[ageDecade] += 1 \n\n```", "```py\nfrom numpy import random \nrandom.seed(0) \n\ntotals = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \npurchases = {20:0, 30:0, 40:0, 50:0, 60:0, 70:0} \ntotalPurchases = 0 \nfor _ in range(100000): \n    ageDecade = random.choice([20, 30, 40, 50, 60, 70]) \n    purchaseProbability = 0.4 \n    totals[ageDecade] += 1 \n    if (random.random() < purchaseProbability): \n        totalPurchases += 1 \n        purchases[ageDecade] += 1 \n\n```", "```py\nPEF = float(purchases[30]) / float(totals[30]) \nprint (\"P(purchase | 30s): \", PEF) \n\nP(purchase | 30s):  0.398760454901 \n\n```", "```py\nPE = float(totalPurchases) / 100000.0 \nprint (\"P(Purchase):\", PE) \n\nP(Purchase): 0.4003 \n\n```"]