["```py\n!pip install pydotplus \n\n```", "```py\n%matplotlib inline \nimport numpy as np \n\nincomes = np.random.normal(27000, 15000, 10000) \nincomes = np.append(incomes, [1000000000]) \n\nimport matplotlib.pyplot as plt \nplt.hist(incomes, 50) \nplt.show() \n\n```", "```py\nincomes.mean() \n\n```", "```py\n127148.50796177129\n\n```", "```py\ndef reject_outliers(data): \n    u = np.median(data) \n    s = np.std(data) \n    filtered = [e for e in data if (u - 2 * s < e < u + 2 * s)] \n    return filtered \n\nfiltered = reject_outliers(incomes) \nplt.hist(filtered, 50) \nplt.show() \n\n```", "```py\nfor number in listOfNumbers: \n    print number, \n    if (number % 2 == 0): \n        print (\"is even\")\n    else: \n        print (\"is odd\") \n\nprint (\"Hooray! We're all done.\")\n\n```", "```py\nimport numpy as np\n\n```", "```py\nimport numpy as np\nA = np.random.normal(25.0, 5.0, 10)\nprint (A)\n\n```", "```py\nimport numpy as np\nA = np.random.normal(55.0, 5.0, 10)\nprint (A)\n\n```", "```py\nx = [1, 2, 3, 4, 5, 6]\nprint (len(x))\n\n```", "```py\nx = [1, 2, 3, 4, 5, 6, 4545]\nprint (len(x))\n\n```", "```py\n7\n\n```", "```py\nx[3:]\n\n```", "```py\n[1, 2, 3]\n\n```", "```py\nx[:4]\n\n```", "```py\n[1, 2, 3, 4]\n\n```", "```py\nx[3:]\n\n```", "```py\n[4, 5, 6]\n\n```", "```py\nx[-2:]\n\n```", "```py\n[5, 6]\n\n```", "```py\nx.extend([7,8])\nx\n\n```", "```py\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n```", "```py\nx.append(9)\nx\n\n```", "```py\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n```", "```py\ny = [10, 11, 12]\nlistOfLists = [x, y]\nlistOfLists\n\n```", "```py\n[[ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [10, 11, 12]]\n\n```", "```py\ny[1]\n\n```", "```py\n11\n\n```", "```py\nz = [3, 2, 1]\nz.sort()\nz\n\n```", "```py\n[1, 2, 3]\n\n```", "```py\nz.sort(reverse=True)\nz\n\n```", "```py\n[3, 2, 1]\n\n```", "```py\n#Tuples are just immutable lists. Use () instead of []\nx = (1, 2, 3)\nlen(x)\n\n```", "```py\n3\n\n```", "```py\ny = (4, 5, 6)\ny[2]\n\n```", "```py\n6\n\n```", "```py\nlistOfTuples = [x, y]\nlistOfTuples\n\n```", "```py\n[(1, 2, 3), (4, 5, 6)]\n\n```", "```py\n(age, income) = \"32,120000\".split(',')\nprint (age)\nprint (income)\n\n```", "```py\n32\n120000\n\n```", "```py\nprint (captains.get(\"NX-01\"))\n\n```", "```py\nNone\n\n```", "```py\nfor ship in captains:\n     print (ship + \": \" + captains[ship])\n\n```", "```py\ndef SquareIt(x):\n    return x * x\nprint (SquareIt(2))\n\n```", "```py\n4\n\n```", "```py\n#You can pass functions around as parameters\ndef DoSomething(f, x):\n    return f(x)\nprint (DoSomething(SquareIt, 3))\n\n```", "```py\n9\n\n```", "```py\n#Lambda functions let you inline simple functions\nprint (DoSomething(lambda x: x * x * x, 3))\n\n```", "```py\n27\n\n```", "```py\nprint (1 == 3)\n\n```", "```py\nFalse\n\n```", "```py\nprint (True or False)\n\n```", "```py\nTrue\n\n```", "```py\nprint (1 is 3)\n\n```", "```py\nFalse\n\n```", "```py\nif 1 is 3:\n    print \"How did that happen?\"\nelif 1 > 3:\n    print (\"Yikes\")\nelse:\n    print (\"All is well with the world\")\n\n```", "```py\nAll is well with the world\n\n```", "```py\nfor x in range(10):\n print (x),\n\n```", "```py\n0 1 2 3 4 5 6 7 8 9\n\n```", "```py\nfor x in range(10):\n    if (x is 1):\n continue\n if (x > 5):\n    break\n print (x),\n\n```", "```py\n0 2 3 4 5\n\n```", "```py\nx = 0\nwhile (x < 10):\n    print (x),\n    x += 1\n\n```", "```py\n0 1 2 3 4 5 6 7 8 9\n\n```"]