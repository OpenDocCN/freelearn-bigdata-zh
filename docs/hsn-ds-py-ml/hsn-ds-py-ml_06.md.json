["```py\nimport pandas as pd \n\nr_cols = ['user_id', 'movie_id', 'rating'] \nratings = pd.read_csv('e:/sundog-consult/packt/datascience/ml-100k/u.data',  \n                      sep='\\\\t', names=r_cols, usecols=range(3)) \n\n```", "```py\nm_cols = ['movie_id', 'title'] \nmovies = pd.read_csv('e:/sundog-consult/packt/datascience/ml-100k/u.item', \n                     sep='|', names=m_cols, usecols=range(2)) \n\n```", "```py\nratings = pd.merge(movies, ratings) \n\n```", "```py\nmovieRatings = ratings.pivot_table(index=['user_id'],\n                                   columns=['title'],values='rating') \nmovieRatings.head() \n\n```", "```py\nstarWarsRatings = movieRatings['Star Wars (1977)'] \nstarWarsRatings.head() \n\n```", "```py\nsimilarMovies = movieRatings.corrwith(starWarsRatings) \nsimilarMovies = similarMovies.dropna() \ndf = pd.DataFrame(similarMovies) \ndf.head(10) \n\n```", "```py\nsimilarMovies.sort_values(ascending=False) \n\n```", "```py\nimport numpy as np \nmovieStats = ratings.groupby('title').agg({'rating': [np.size, np.mean]}) \nmovieStats.head() \n\n```", "```py\npopularMovies = movieStats['rating']['size'] >= 100 \nmovieStats[popularMovies].sort_values([('rating', 'mean')], ascending=False)[:15] \n\n```", "```py\ndf = movieStats[popularMovies].join(pd.DataFrame(similarMovies, columns=['similarity'])) \ndf.head() \n\n```", "```py\ndf.sort_values(['similarity'], ascending=False)[:15] \n\n```", "```py\nimport pandas as pd \n\nr_cols = ['user_id', 'movie_id', 'rating'] \nratings = pd.read_csv('e:/sundog-consult/packt/datascience/ml-100k/u.data',      \n                      sep='\\t', names=r_cols, usecols=range(3)) \n\nm_cols = ['movie_id', 'title'] \nmovies = pd.read_csv('e:/sundog-consult/packt/datascience/ml-100k/u.item', \n                     sep='|', names=m_cols, usecols=range(2)) \n\nratings = pd.merge(movies, ratings) \n\nratings.head() \n\n```", "```py\nuserRatings = ratings.pivot_table(index=['user_id'],\n                                  columns=['title'],values='rating') \nuserRatings.head() \n\n```", "```py\ncorrMatrix = userRatings.corr() \ncorrMatrix.head() \n\n```", "```py\ncorrMatrix = userRatings.corr(method='pearson', min_periods=100) \ncorrMatrix.head() \n\n```", "```py\nmyRatings = userRatings.loc[0].dropna() \nmyRatings \n\n```", "```py\nsimCandidates = pd.Series() \nfor i in range(0, len(myRatings.index)): \n    print \"Adding sims for \" + myRatings.index[i] + \"...\" \n    # Retrieve similar movies to this one that I rated \n    sims = corrMatrix[myRatings.index[i]].dropna() \n    # Now scale its similarity by how well I rated this movie \n    sims = sims.map(lambda x: x * myRatings[i]) \n    # Add the score to the list of similarity candidates \n    simCandidates = simCandidates.append(sims) \n\n#Glance at our results so far: \nprint \"sorting...\" \nsimCandidates.sort_values(inplace = True, ascending = False) \nprint simCandidates.head(10) \n\n```", "```py\nsimCandidates = simCandidates.groupby(simCandidates.index).sum() \nsimCandidates.sort_values(inplace = True, ascending = False) \nsimCandidates.head(10) \n\n```", "```py\nfilteredSims = simCandidates.drop(myRatings.index) \nfilteredSims.head(10) \n\n```"]