["```java\n<!-- https://mvnrepository.com/artifact/org.apache.flink/flink-cep-scala_2.10 --> \n<dependency> \n    <groupId>org.apache.flink</groupId> \n    <artifactId>flink-cep-scala_2.11</artifactId> \n    <version>1.1.4</version> \n</dependency> \n\n```", "```java\npackage com.demo.chapter05; \n\npublic abstract class MonitoringEvent { \n\n  private String machineName; \n\n  public String getMachineName() { \n    return machineName; \n  } \n\n  public void setMachineName(String machineName) { \n    this.machineName = machineName; \n  } \n\n  @Override \n  public int hashCode() { \n    final int prime = 31; \n    int result = 1; \n    result = prime * result + ((machineName == null) ? 0 : machineName.hashCode()); \n    return result; \n  } \n\n  @Override \n  public boolean equals(Object obj) { \n    if (this == obj) \n      return true; \n    if (obj == null) \n      return false; \n    if (getClass() != obj.getClass()) \n      return false; \n    MonitoringEvent other = (MonitoringEvent) obj; \n    if (machineName == null) { \n      if (other.machineName != null) \n        return false; \n    } else if (!machineName.equals(other.machineName)) \n      return false; \n    return true; \n  } \n\n  public MonitoringEvent(String machineName) { \n    super(); \n    this.machineName = machineName; \n  } \n\n} \n\n```", "```java\npackage com.demo.chapter05; \n\npublic class TemperatureEvent extends MonitoringEvent { \n\n  public TemperatureEvent(String machineName) { \n    super(machineName); \n  } \n\n  private double temperature; \n\n  public double getTemperature() { \n    return temperature; \n  } \n\n  public void setTemperature(double temperature) { \n    this.temperature = temperature; \n  } \n\n  @Override \n  public int hashCode() { \n    final int prime = 31; \n    int result = super.hashCode(); \n    long temp; \n    temp = Double.doubleToLongBits(temperature); \n    result = prime * result + (int) (temp ^ (temp >>> 32)); \n    return result; \n  } \n\n  @Override \n  public boolean equals(Object obj) { \n    if (this == obj) \n      return true; \n    if (!super.equals(obj)) \n      return false; \n    if (getClass() != obj.getClass()) \n      return false; \n    TemperatureEvent other = (TemperatureEvent) obj; \n    if (Double.doubleToLongBits(temperature) != Double.doubleToLongBits(other.temperature)) \n      return false; \n    return true; \n  } \n\n  public TemperatureEvent(String machineName, double temperature) { \n    super(machineName); \n    this.temperature = temperature; \n  } \n\n  @Override \n  public String toString() { \n    return \"TemperatureEvent [getTemperature()=\" + getTemperature() + \", getMachineName()=\" + getMachineName() \n        + \"]\"; \n  } \n\n} \n\n```", "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); \n    DataStream<TemperatureEvent> inputEventStream = env.fromElements(new TemperatureEvent(\"xyz\", 22.0), \n        new TemperatureEvent(\"xyz\", 20.1), new TemperatureEvent(\"xyz\", 21.1), new TemperatureEvent(\"xyz\", 22.2), \n        new TemperatureEvent(\"xyz\", 22.1), new TemperatureEvent(\"xyz\", 22.3), new TemperatureEvent(\"xyz\", 22.1), \n        new TemperatureEvent(\"xyz\", 22.4), new TemperatureEvent(\"xyz\", 22.7), \n        new TemperatureEvent(\"xyz\", 27.0)); \n\n```", "```java\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment \n    val input: DataStream[TemperatureEvent] = env.fromElements(new TemperatureEvent(\"xyz\", 22.0), \n      new TemperatureEvent(\"xyz\", 20.1), new TemperatureEvent(\"xyz\", 21.1), new TemperatureEvent(\"xyz\", 22.2), \n      new TemperatureEvent(\"xyz\", 22.1), new TemperatureEvent(\"xyz\", 22.3), new TemperatureEvent(\"xyz\", 22.1), \n      new TemperatureEvent(\"xyz\", 22.4), new TemperatureEvent(\"xyz\", 22.7), \n      new TemperatureEvent(\"xyz\", 27.0)) \n\n```", "```java\nPattern<Event, ?> start = Pattern.<Event>begin(\"start\"); \n\n```", "```java\nval start : Pattern[Event, _] = Pattern.begin(\"start\") \n\n```", "```java\nstart.where(new FilterFunction<Event>() { \n    @Override \n    public boolean filter(Event value) { \n        return ... // condition \n    } \n}); \n\n```", "```java\nstart.where(event => ... /* condition */) \n\n```", "```java\nstart.subtype(SubEvent.class).where(new FilterFunction<SubEvent>() { \n    @Override \n    public boolean filter(SubEvent value) { \n        return ... // condition \n    } \n}); \n\n```", "```java\nstart.subtype(classOf[SubEvent]).where(subEvent => ... /* condition */) \n\n```", "```java\npattern.where(new FilterFunction<Event>() { \n    @Override \n    public boolean filter(Event value) { \n        return ... // condition \n    } \n}).or(new FilterFunction<Event>() { \n    @Override \n    public boolean filter(Event value) { \n        return ... // or condition \n    } \n}); \n\n```", "```java\npattern.where(event => ... /* condition */).or(event => ... /* or condition */) \n\n```", "```java\nPattern<Event, ?> strictNext = start.next(\"middle\"); \n\n```", "```java\nval strictNext: Pattern[Event, _] = start.next(\"middle\") \n\n```", "```java\nPattern<Event, ?> nonStrictNext = start.followedBy(\"middle\"); \n\n```", "```java\nval nonStrictNext : Pattern[Event, _] = start.followedBy(\"middle\") \n\n```", "```java\nnext.within(Time.seconds(30)); \n\n```", "```java\nnext.within(Time.seconds(10)) \n\n```", "```java\nPattern<TemperatureEvent, ?> warningPattern = Pattern.<TemperatureEvent> begin(\"first\") \n        .subtype(TemperatureEvent.class).where(new FilterFunction<TemperatureEvent>() { \n          public boolean filter(TemperatureEvent value) { \n            if (value.getTemperature() >= 26.0) { \n              return true; \n            } \n            return false; \n          } \n        }).within(Time.seconds(10)); \n\n    PatternStream<TemperatureEvent> patternStream = CEP.pattern(inputEventStream, warningPattern); \n\n```", "```java\nval env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment \n\nval input = // data \n\nval pattern: Pattern[TempEvent, _] = Pattern.begin(\"start\").where(event => event.temp >= 26.0) \n\nval patternStream: PatternStream[TempEvent] = CEP.pattern(input, pattern) \n\n```", "```java\npackage com.demo.chapter05; \n\npublic class Alert { \n\n  private String message; \n\n  public String getMessage() { \n    return message; \n  } \n\n  public void setMessage(String message) { \n    this.message = message; \n  } \n\n  public Alert(String message) { \n    super(); \n    this.message = message; \n  } \n\n  @Override \n  public String toString() { \n    return \"Alert [message=\" + message + \"]\"; \n  } \n\n  @Override \n  public int hashCode() { \n    final int prime = 31; \n    int result = 1; \n    result = prime * result + ((message == null) ? 0 :  \n    message.hashCode()); \n    return result; \n  } \n\n  @Override \n  public boolean equals(Object obj) { \n    if (this == obj) \n      return true; \n    if (obj == null) \n      return false; \n    if (getClass() != obj.getClass()) \n      return false; \n    Alert other = (Alert) obj; \n    if (message == null) { \n      if (other.message != null) \n        return false; \n    } else if (!message.equals(other.message)) \n      return false; \n    return true; \n  } \n\n} \n\n```", "```java\nclass MyPatternSelectFunction<IN, OUT> implements PatternSelectFunction<IN, OUT> { \n    @Override \n    public OUT select(Map<String, IN> pattern) { \n        IN startEvent = pattern.get(\"start\"); \n        IN endEvent = pattern.get(\"end\"); \n        return new OUT(startEvent, endEvent); \n    } \n} \n\n```", "```java\ndef selectFn(pattern : mutable.Map[String, IN]): OUT = { \n    val startEvent = pattern.get(\"start\").get \n    val endEvent = pattern.get(\"end\").get \n    OUT(startEvent, endEvent) \n} \n\n```", "```java\nclass MyPatternFlatSelectFunction<IN, OUT> implements PatternFlatSelectFunction<IN, OUT> { \n    @Override \n    public void select(Map<String, IN> pattern, Collector<OUT> collector) { \n        IN startEvent = pattern.get(\"start\"); \n        IN endEvent = pattern.get(\"end\"); \n\n        for (int i = 0; i < startEvent.getValue(); i++ ) { \n            collector.collect(new OUT(startEvent, endEvent)); \n        } \n    } \n} \n\n```", "```java\ndef flatSelectFn(pattern : mutable.Map[String, IN], collector : Collector[OUT]) = { \n    val startEvent = pattern.get(\"start\").get \n    val endEvent = pattern.get(\"end\").get \n    for (i <- 0 to startEvent.getValue) { \n        collector.collect(OUT(startEvent, endEvent)) \n    } \n} \n\n```", "```java\nPatternStream<Event> patternStream = CEP.pattern(input, pattern); \n\nDataStream<Either<TimeoutEvent, ComplexEvent>> result = patternStream.select( \n    new PatternTimeoutFunction<Event, TimeoutEvent>() {...}, \n    new PatternSelectFunction<Event, ComplexEvent>() {...} \n); \n\nDataStream<Either<TimeoutEvent, ComplexEvent>> flatResult = patternStream.flatSelect( \n    new PatternFlatTimeoutFunction<Event, TimeoutEvent>() {...}, \n    new PatternFlatSelectFunction<Event, ComplexEvent>() {...} \n);  \n\n```", "```java\nval patternStream: PatternStream[Event] = CEP.pattern(input, pattern) \n\nDataStream[Either[TimeoutEvent, ComplexEvent]] result = patternStream.select{ \n    (pattern: mutable.Map[String, Event], timestamp: Long) => TimeoutEvent() \n} { \n    pattern: mutable.Map[String, Event] => ComplexEvent() \n} \n\n```", "```java\nval patternStream: PatternStream[Event] = CEP.pattern(input, pattern) \n\nDataStream[Either[TimeoutEvent, ComplexEvent]] result = patternStream.flatSelect{ \n    (pattern: mutable.Map[String, Event], timestamp: Long, out: Collector[TimeoutEvent]) => \n        out.collect(TimeoutEvent()) \n} { \n    (pattern: mutable.Map[String, Event], out: Collector[ComplexEvent]) => \n        out.collect(ComplexEvent()) \n} \n\n```", "```java\n  <!-- https://mvnrepository.com/artifact/org.apache.flink/flink-cep-scala_2.11 --> \n    <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-cep-scala_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n    <!-- https://mvnrepository.com/artifact/org.apache.flink/flink- streaming-java_2.11 --> \n    <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-streaming-java_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n    <!-- https://mvnrepository.com/artifact/org.apache.flink/flink- streaming-scala_2.11 --> \n    <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-streaming-scala_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n    <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-connector-kafka-0.9_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n\n```", "```java\npackage com.demo.chapter05; \n\nimport java.io.IOException; \nimport java.nio.charset.StandardCharsets; \n\nimport org.apache.flink.api.common.typeinfo.TypeInformation; \nimport org.apache.flink.api.java.typeutils.TypeExtractor; \nimport org.apache.flink.streaming.util.serialization.DeserializationSchema; \n\npublic class EventDeserializationSchema implements DeserializationSchema<TemperatureEvent> { \n\n  public TypeInformation<TemperatureEvent> getProducedType() { \n    return TypeExtractor.getForClass(TemperatureEvent.class); \n  } \n\n  public TemperatureEvent deserialize(byte[] arg0) throws IOException { \n    String str = new String(arg0, StandardCharsets.UTF_8); \n\n    String[] parts = str.split(\"=\"); \n    return new TemperatureEvent(parts[0], Double.parseDouble(parts[1])); \n  } \n\n  public boolean isEndOfStream(TemperatureEvent arg0) { \n    return false; \n  } \n\n} \n\n```", "```java\nbin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic temperature \n\n```", "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); \n\n    Properties properties = new Properties(); \n    properties.setProperty(\"bootstrap.servers\", \"localhost:9092\"); \n    properties.setProperty(\"group.id\", \"test\"); \n\nDataStream<TemperatureEvent> inputEventStream = env.addSource( \n        new FlinkKafkaConsumer09<TemperatureEvent>(\"temperature\", new EventDeserializationSchema(), properties)); \n\n```", "```java\nPattern<TemperatureEvent, ?> warningPattern = Pattern.<TemperatureEvent> begin(\"first\").subtype(TemperatureEvent.class).where(new FilterFunction<TemperatureEvent>() { \n          private static final long serialVersionUID = 1L; \n\n          public boolean filter(TemperatureEvent value) { \n            if (value.getTemperature() >= 26.0) { \n              return true; \n            } \n            return false; \n          } \n        }).within(Time.seconds(10)); \n\n```", "```java\nDataStream<Alert> patternStream = CEP.pattern(inputEventStream, warningPattern) \n        .select(new PatternSelectFunction<TemperatureEvent, Alert>() { \n          private static final long serialVersionUID = 1L; \n\n          public Alert select(Map<String, TemperatureEvent> event) throws Exception { \n\n            return new Alert(\"Temperature Rise Detected:\" + event.get(\"first\").getTemperature() \n                + \" on machine name:\" + event.get(\"first\").getMachineName()); \n          } \n\n}); \n\n```", "```java\npatternStream.print(); \n\n```", "```java\nenv.execute(\"CEP on Temperature Sensor\"); \n\n```", "```java\nxyz=21.0 \nxyz=30.0 \nLogShaft=29.3 \nBoiler=23.1 \nBoiler=24.2 \nBoiler=27.0 \nBoiler=29.0 \n\n```", "```java\nConnected to JobManager at Actor[akka://flink/user/jobmanager_1#1010488393] \n10/09/2016 18:15:55  Job execution switched to status RUNNING. \n10/09/2016 18:15:55  Source: Custom Source(1/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Source: Custom Source(1/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Source: Custom Source(2/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Source: Custom Source(2/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Source: Custom Source(3/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Source: Custom Source(3/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Source: Custom Source(4/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Source: Custom Source(4/4) switched to DEPLOYING  \n10/09/2016 18:15:55  CEPPatternOperator(1/1) switched to SCHEDULED  \n10/09/2016 18:15:55  CEPPatternOperator(1/1) switched to DEPLOYING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(1/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(1/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(2/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(2/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(3/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(3/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(4/4) switched to SCHEDULED  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(4/4) switched to DEPLOYING  \n10/09/2016 18:15:55  Source: Custom Source(2/4) switched to RUNNING  \n10/09/2016 18:15:55  Source: Custom Source(3/4) switched to RUNNING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(1/4) switched to RUNNING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(2/4) switched to RUNNING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(3/4) switched to RUNNING  \n10/09/2016 18:15:55  Source: Custom Source(4/4) switched to RUNNING  \n10/09/2016 18:15:55  Source: Custom Source(1/4) switched to RUNNING  \n10/09/2016 18:15:55  CEPPatternOperator(1/1) switched to RUNNING  \n10/09/2016 18:15:55  Map -> Sink: Unnamed(4/4) switched to RUNNING  \n1> Alert [message=Temperature Rise Detected:30.0 on machine name:xyz] \n2> Alert [message=Temperature Rise Detected:29.3 on machine name:LogShaft] \n3> Alert [message=Temperature Rise Detected:27.0 on machine name:Boiler] \n4> Alert [message=Temperature Rise Detected:29.0 on machine name:Boiler] \n\n```"]