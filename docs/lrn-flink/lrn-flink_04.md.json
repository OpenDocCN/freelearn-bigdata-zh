["```java\n  <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-table_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n\n```", "```java\npublic static class WC { \n    public String word; \n    public long frequency; \n    public WC(){ \n    } \n\n    public WC(String word, long frequency) { \n      this.word = word; \n      this.frequency = frequency; \n    } \n\n    @Override \n    public String toString() { \n      return \"WC \" + word + \" \" + frequency; \n    } \n  } \n\n```", "```java\ncase class WordCount(word: String, frequency: Long) \n\n```", "```java\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); \n\nBatchTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env); \n\nDataSet<WC> input = env.fromElements(new WC(\"Hello\", 1), new WC(\"World\", 1), new WC(\"Hello\", 1)); \n\n// register the DataSet as table \"WordCount\" \ntEnv.registerDataSet(\"WordCount\", input, \"word, frequency\"); \n\n```", "```java\nval env = ExecutionEnvironment.getExecutionEnvironment \n\nval tEnv = TableEnvironment.getTableEnvironment(env) \n\nval input = env.fromElements(WordCount(\"hello\", 1), WordCount(\"hello\", 1), WordCount(\"world\", 1), WordCount(\"hello\", 1)) \n\n//register the dataset  \ntEnv.registerDataSet(\"WordCount\", input, 'word, 'frequency) \n\n```", "```java\npublic static class WC { \n    public String word; \n    public long frequency; \n\n    public WC() { \n    }s \n    public WC(String word, long frequency) { \n      this.word = word; \n      this.frequency = frequency; \n    } \n\n    @Override \n    public String toString() { \n      return \"WC \" + word + \" \" + frequency; \n    } \n  } \n\n```", "```java\ncase class WordCount(word: String, frequency: Long) \n\n```", "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); \n    StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env); \n\n    DataStream<WC> input = env.fromElements(new WC(\"Hello\", 1), new WC(\"World\", 1), new WC(\"Hello\", 1)); \n\n    // register the DataStream as table \"WordCount\" \n    tEnv.registerDataStream(\"WordCount\", input, \"word, frequency\"); \n\n```", "```java\nval env = StreamExecutionEnvironment.getExecutionEnvironment \n\nval tEnv = TableEnvironment.getTableEnvironment(env) \n\nval input = env.fromElements(WordCount(\"hello\", 1), WordCount(\"hello\", 1), WordCount(\"world\", 1), WordCount(\"hello\", 1)) \n\n//register the dataset  \ntEnv.registerDataStream(\"WordCount\", input, 'word, 'frequency) \n\n```", "```java\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); \nBatchTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env); \n\nDataSet<WC> input = env.fromElements(new WC(\"Hello\", 1), new WC(\"World\", 1), new WC(\"Hello\", 1)); \n\ntEnv.registerDataSet(\"WordCount\", input, \"word, frequency\"); \n\nTable selectedTable = tEnv \n        .sql(\"SELECT word, SUM(frequency) as frequency FROM WordCount GROUP BY word having word = 'Hello'\"); \n\ntEnv.registerTable(\"selected\", selectedTable); \n\n```", "```java\nval env = ExecutionEnvironment.getExecutionEnvironment \n\nval tEnv = TableEnvironment.getTableEnvironment(env) \n\nval input = env.fromElements(WordCount(\"hello\", 1), WordCount(\"hello\", 1), WordCount(\"world\", 1), WordCount(\"hello\", 1)) \n\ntEnv.registerDataSet(\"WordCount\", input, 'word, 'frequency) \n\nval table = tEnv.sql(\"SELECT word, SUM(frequency) FROM WordCount GROUP BY word\") \n\nval selected = tEnv.sql(\"SELECT word, SUM(frequency) FROM WordCount GROUP BY word where word = 'hello'\") \n    tEnv.registerTable(\"selected\", selected) \n\n```", "```java\n    <dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-table_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n\n```", "```java\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); \nBatchTableEnvironment tableEnv = TableEnvironment.getTableEnvironment(env); \n\nTableSource orders = new CsvTableSource(\"/path/to/file\", ...) \n\n// register a TableSource as external table \"orders\" \ntableEnv.registerTableSource(\"orders\", orders) \n\n```", "```java\nval env = ExecutionEnvironment.getExecutionEnvironment \nval tableEnv = TableEnvironment.getTableEnvironment(env) \n\nval orders: TableSource = new CsvTableSource(\"/path/to/file\", ...) \n\n// register a TableSource as external table \"orders\" \ntableEnv.registerTableSource(\"orders\", orders) \n\n```", "```java\n<dependency> \n      <groupId>org.apache.flink</groupId> \n      <artifactId>flink-table_2.11</artifactId> \n      <version>1.1.4</version> \n    </dependency> \n\n```", "```java\n        <dependency> \n            <groupId>org.apache.flink</groupId> \n            <artifactId>flink-connector-kafka-0.8_2.11</artifactId> \n            <version>1.1.4</version> \n        </dependency> \n\n```", "```java\n        <dependency> \n            <groupId>org.apache.flink</groupId> \n            <artifactId>flink-connector-kafka-0.9_2.11</artifactId> \n            <version>1.1.4</version> \n        </dependency> \n\n```", "```java\nString[] fields =  new String[] { \"id\", \"name\", \"price\"}; \nClass<?>[] types = new Class<?>[] { Integer.class, String.class, Double.class }; \n\nKafkaJsonTableSource kafkaTableSource = new Kafka08JsonTableSource( \n    kafkaTopic, \n    kafkaProperties, \n    fields, \n    types); \n\ntableEnvironment.registerTableSource(\"kafka-source\", kafkaTableSource); \nTable result = tableEnvironment.ingest(\"kafka-source\"); \n\n```", "```java\ntableEnvironment.scan(\"tableName\") \n\n```", "```java\ntableEnvironment.ingest(\"tableName\") \n\n```", "```java\nTable result = in.select(\"id, name\"); \nTable result = in.select(\"*\"); \n\n```", "```java\nval result = in.select('id, 'name); \nval result = in.select('*); \n\n```", "```java\nTable result = in.where(\"id = '101'\"); \n\n```", "```java\nval result = in.where('id == \"101\"); \n\n```", "```java\nTable result = in.filter(\"id = '101'\"); \n\n```", "```java\nval result = in.filter('id == \"101\"); \n\n```", "```java\nTable in = tableEnv.fromDataSet(ds, \"id, name\"); \nTable result = in.as(\"order_id, order_name\"); \n\n```", "```java\nval in = ds.toTable(tableEnv).as('order_id, 'order_name ) \n\n```", "```java\nTable result = in.groupBy(\"company\"); \n\n```", "```java\nval in = in.groupBy('company) \n\n```", "```java\nTable employee = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable dept = tableEnv.fromDataSet(dept, \"d_id, d_name\"); \n\nTable result = employee.join(dept).where(\"deptId = d_id\").select(\"e_id, e_name, d_name\"); \n\n```", "```java\nval employee = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId); \n\nval dept = deptDS.toTable(tableEnv, 'd_id, 'd_name); \n\nTable result = employee.join(dept).where('deptId == 'd_id).select('e_id, 'e_name, 'd_name); \n\n```", "```java\nTable employee = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable dept = tableEnv.fromDataSet(dept, \"d_id, d_name\"); \n\nTable result = employee.leftOuterJoin(dept).where(\"deptId = d_id\").select(\"e_id, e_name, d_name\"); \n\n```", "```java\nval employee = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId); \n\nval dept = deptDS.toTable(tableEnv, 'd_id, 'd_name); \n\nTable result = employee.leftOuterJoin(dept).where('deptId == 'd_id).select('e_id, 'e_name, 'd_name); \n\n```", "```java\nTable employee = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable dept = tableEnv.fromDataSet(dept, \"d_id, d_name\"); \n\nTable result = employee.rightOuterJoin(dept).where(\"deptId = d_id\").select(\"e_id, e_name, d_name\"); \n\n```", "```java\nval employee = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId); \n\nval dept = deptDS.toTable(tableEnv, 'd_id, 'd_name); \n\nTable result = employee.rightOuterJoin(dept).where('deptId == 'd_id).select('e_id, 'e_name, 'd_name); \n\n```", "```java\nTable employee = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable dept = tableEnv.fromDataSet(dept, \"d_id, d_name\"); \n\nTable result = employee.fullOuterJoin(dept).where(\"deptId = d_id\").select(\"e_id, e_name, d_name\"); \n\n```", "```java\nval employee = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId); \n\nval dept = deptDS.toTable(tableEnv, 'd_id, 'd_name); \n\nTable result = employee.fullOuterJoin(dept).where('deptId == 'd_id).select('e_id, 'e_name, 'd_name); \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.union(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.union(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.unionAll(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.unionAll(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.intersect(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.intersect(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.intersectAll(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.intersectAll(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.minus(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.minus(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable employee2 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.minusAll(employee2); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nval employee2 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.minusAll(employee2) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.distinct(); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.distinct() \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\nTable result = employee1.orderBy(\"e_id.asc\"); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n\nTable result = employee1.orderBy('e_id.asc) \n\n```", "```java\nTable employee1 = tableEnv.fromDataSet(emp, \"e_id, e_name, deptId\"); \n\n//returns records from 6th record \nTable result = employee1.orderBy(\"e_id.asc\").limit(5); \n\n//returns 5 records from 4th record \nTable result1 = employee1.orderBy(\"e_id.asc\").limit(3,5); \n\n```", "```java\nval employee1 = empDS.toTable(tableEnv, 'e_id, 'e_name, 'deptId) \n//returns records from 6th record \nTable result = employee1.orderBy('e_id.asc).limit(5) \n//returns 5 records from 4th record \nTable result = employee1.orderBy('e_id.asc).limit(3,5) \n\n```", "```java\nStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); \nStreamTableEnvironment tableEnv = TableEnvironment.getTableEnvironment(env); \n\nDataStream<Tuple3<Long, String, Integer>> ds = env.addSource(...); \n// register the DataStream as table \"Products\" \ntableEnv.registerDataStream(\"Products\", ds, \"id, name, stock\"); \n// run a SQL query on the Table and retrieve the result as a new Table \nTable result = tableEnv.sql( \n  \"SELECT STREAM * FROM Products WHERE name LIKE '%Apple%'\"); \n\n```", "```java\nval env = StreamExecutionEnvironment.getExecutionEnvironment \nval tEnv = TableEnvironment.getTableEnvironment(env) \n\nval ds: DataStream[(Long, String, Integer)] = env.addSource(...) \n// register the DataStream under the name \"Products\" \ntableEnv.registerDataStream(\"Products\", ds, 'id, 'name, 'stock) \n// run a SQL query on the Table and retrieve the result as a new Table \nval result = tableEnv.sql( \n  \"SELECT STREAM * FROM Products WHERE name LIKE '%Apple%'\") \n\n```", "```java\n\"SELECT col as `my col` FROM table \" \n\n```", "```java\nquery: \n  values \n  | { \n      select \n      | selectWithoutFrom \n      | query UNION [ ALL ] query \n      | query EXCEPT query \n      | query INTERSECT query \n    } \n    [ ORDER BY orderItem [, orderItem ]* ] \n    [ LIMIT { count | ALL } ] \n    [ OFFSET start { ROW | ROWS } ] \n    [ FETCH { FIRST | NEXT } [ count ] { ROW | ROWS } ONLY] \n\norderItem: \n  expression [ ASC | DESC ] \n\nselect: \n  SELECT [ STREAM ] [ ALL | DISTINCT ] \n  { * | projectItem [, projectItem ]* } \n  FROM tableExpression \n  [ WHERE booleanExpression ] \n  [ GROUP BY { groupItem [, groupItem ]* } ] \n  [ HAVING booleanExpression ] \n\nselectWithoutFrom: \n  SELECT [ ALL | DISTINCT ] \n  { * | projectItem [, projectItem ]* } \n\nprojectItem: \n  expression [ [ AS ] columnAlias ] \n  | tableAlias . * \n\ntableExpression: \n  tableReference [, tableReference ]* \n  | tableExpression [ NATURAL ] [ LEFT | RIGHT | FULL ] JOIN tableExpression [ joinCondition ] \n\njoinCondition: \n  ON booleanExpression \n  | USING '(' column [, column ]* ')' \n\ntableReference: \n  tablePrimary \n  [ [ AS ] alias [ '(' columnAlias [, columnAlias ]* ')' ] ] \n\ntablePrimary: \n  [ TABLE ] [ [ catalogName . ] schemaName . ] tableName \n\nvalues: \n  VALUES expression [, expression ]* \n\ngroupItem: \n  expression \n  | '(' ')' \n  | '(' expression [, expression ]* ')' \n\n```", "```java\nExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment(); \nBatchTableEnvironment tableEnv = TableEnvironment.getTableEnvironment(env); \nDataSet<Record> csvInput = env \n          .readCsvFile(\"olympic-athletes.csv\") \n          .pojoType(Record.class, \"playerName\", \"country\", \"year\",   \n                    \"game\", \"gold\", \"silver\", \"bronze\", \"total\"); \n\n```", "```java\nTable atheltes = tableEnv.fromDataSet(csvInput); \ntableEnv.registerTable(\"athletes\", atheltes); \n\n```", "```java\nTable groupedByCountry = tableEnv.sql(\"SELECT country, SUM(total) as frequency FROM athletes group by country\"); \nDataSet<Result> result = tableEnv.toDataSet(groupedByCountry, Result.class); \nresult.print(); \nTable groupedByGame = atheltes.groupBy(\"game\").select(\"game, total.sum as frequency\"); \nDataSet<GameResult> gameResult = tableEnv.toDataSet(groupedByGame, GameResult.class); \ngameResult.print(); \n\n```"]