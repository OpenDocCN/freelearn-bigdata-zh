["```scala\ngraph1_edges.csvgraph1_vertex.csv\n```", "```scala\n1,Mike,482,Sarah,453,John,254,Jim,535,Kate,226,Flo,52\n```", "```scala\n6,1,Sister1,2,Husband2,1,Wife5,1,Daughter5,2,Daughter3,1,Son3,2,Son4,1,Friend1,5,Father1,3,Father2,5,Mother2,3,Mother\n```", "```scala\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\nimport org.apache.spark.graphx._\nimport org.apache.spark.rdd.RDD\n```", "```scala\nobject graph1 extends App {\n```", "```scala\nval vertexFile = \"graph1_vertex.csv\"\nval edgeFile   = \"graph1_edges.csv\"\n```", "```scala\nval sparkMaster = \"spark://localhost:7077\"\nval appName = \"Graph 1\"\nval conf = new SparkConf()\nconf.setMaster(sparkMaster)\nconf.setAppName(appName)\n```", "```scala\nval sparkCxt = new SparkContext(conf)\n```", "```scala\nval vertices: RDD[(VertexId, (String, String))] =\n     sparkCxt.textFile(vertexFile).map { line =>\n       val fields = line.split(\",\")\n       ( fields(0).toLong, ( fields(1), fields(2) ) )\n}\n```", "```scala\nval edges: RDD[Edge[String]] =\n     sparkCxt.textFile(edgeFile).map { line =>\n       val fields = line.split(\",\")\n       Edge(fields(0).toLong, fields(1).toLong, fields(2))\n}\n```", "```scala\nval default = (\"Unknown\", \"Missing\")\nval graph = Graph(vertices, edges, default)\n```", "```scala\nprintln( \"vertices : \" + graph.vertices.count )println( \"edges   : \" + graph.edges.count )\n```", "```scala\nspark-submit \\--class graph1 \\--master spark://localhost:7077 \\--executor-memory 700M \\--total-executor-cores ...\n```", "```scala\nval c1 = graph.vertices.filter { case (id, (name, age)) => age.toLong > 40 }.count\nval c2 = graph.edges.filter { case Edge(from, to, property)\n   => property == \"Father\" | property == \"Mother\" }.count\nprintln( \"Vertices count : \" + c1 )\nprintln( \"Edges   count : \" + c2 )\n```", "```scala\nVertices count : 4\nEdges   count : 4\n```", "```scala\nval tolerance = 0.0001val ranking = graph.pageRank(tolerance).verticesval rankByPerson = vertices.join(ranking).map {   case (id, ( (person,age) , rank )) => (rank, id, person)}\n```", "```scala\nval tCount = graph.triangleCount().vertices\nprintln( tCount.collect().mkString(\"\\n\") )\n```", "```scala\n(4,0)\n(6,0)\n(2,4)\n(1,4)\n(3,2)\n(5,2)\n```", "```scala\nval iterations = 1000val connected = graph.connectedComponents().verticesval connectedS = graph.stronglyConnectedComponents(iterations).vertices ...\n```"]