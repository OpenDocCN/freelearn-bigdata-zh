["```scala\nwget http://files.grouplens.org/datasets/movielens/ml-1m.zip\n```", "```scala\ncurl http://files.grouplens.org/datasets/movielens/ml-1m.zip -o ml-1m.zip\n```", "```scala\nunzip ml-1m.zip\ncreating: ml-1m/\ninflating: ml-1m/movies.dat\ninflating: ml-1m/ratings.dat\ninflating: ml-1m/README\ninflating: ml-1m/users.dat\n```", "```scala\ncd m1-1m\n```", "```scala\nhead -5 movies.dat\n1::Toy Story (1995)::Animation|Children's|Comedy\n2::Jumanji (1995)::Adventure|Children's|Fantasy\n3::Grumpier Old Men (1995)::Comedy|Romance\n4::Waiting to Exhale (1995)::Comedy|Drama\n5::Father of the Bride Part II (1995)::Comedy\n```", "```scala\nhead -5 ratings.dat\n1::1193::5::978300760\n1::661::3::978302109\n1::914::3::978301968\n1::3408::4::978300275\n1::2355::5::978824291\n```", "```scala\npackage spark.ml.cookbook.chapter7\n```", "```scala\nimport java.text.DecimalFormat import org.apache.log4j.{Level, Logger} import org.apache.spark.sql.SparkSession import org.jfree.chart.{ChartFactory, ChartFrame, JFreeChart} import org.jfree.chart.axis.NumberAxis import org.jfree.chart.plot.PlotOrientation import org.jfree.data.xy.{XYSeries, ...\n```", "```scala\npackage spark.ml.cookbook.chapter7\n```", "```scala\nimport java.text.DecimalFormat\n import org.apache.log4j.{Level, Logger}\n import org.apache.spark.sql.SparkSession\n import org.jfree.chart.{ChartFactory, ChartFrame, JFreeChart}\n import org.jfree.chart.axis.NumberAxis\n import org.jfree.chart.plot.PlotOrientation\n import org.jfree.data.xy.{XYSeries, XYSeriesCollection}\n```", "```scala\ncase class Rating(userId: Int, movieId: Int, rating: Float, timestamp: Long)\n```", "```scala\ndef show(chart: JFreeChart) {\n val frame = new ChartFrame(\"plot\", chart)\n frame.pack()\n frame.setVisible(true)\n }\n```", "```scala\ndef parseRating(str: String): Rating = {\n val columns = str.split(\"::\")\n assert(columns.size == 4)\n Rating(columns(0).toInt, columns(1).toInt, columns(2).toFloat, columns(3).toLong)\n }\n```", "```scala\nval ratingsFile = \"../data/sparkml2/chapter7/ratings.dat\"\n```", "```scala\nval spark = SparkSession\n .*builder* .master(\"local[*]\")\n .appName(\"MovieRating App\")\n .config(\"spark.sql.warehouse.dir\", \".\")\n .config(\"spark.executor.memory\", \"2g\")\n .getOrCreate()\n```", "```scala\nLogger.getLogger(\"org\").setLevel(Level.ERROR)\n```", "```scala\nimport spark.implicits._\n val ratings = spark.read.textFile(ratingsFile).map(*parseRating*)\n```", "```scala\nratings.createOrReplaceTempView(\"ratings\")\n```", "```scala\nval resultDF = spark.sql(\"select ratings.userId, count(*) as count from ratings group by ratings.userId\")\nresultDF.show(25, false);\n```", "```scala\nval scatterPlotDataset = new XYSeriesCollection()\n val xy = new XYSeries(\"\")\n\n resultDF.collect().foreach({r => xy.add( r.getAs[Integer](\"userId\"), r.getAs[Integer](\"count\")) })\n\n scatterPlotDataset.addSeries(xy)\n\n val chart = ChartFactory.*createScatterPlot*(\n \"\", \"User\", \"Ratings Per User\", scatterPlotDataset, PlotOrientation.*VERTICAL*, false, false, false)\n val chartPlot = chart.getXYPlot()\n\n val xAxis = chartPlot.getDomainAxis().asInstanceOf[NumberAxis]\n xAxis.setNumberFormatOverride(new DecimalFormat(\"####\"))\n```", "```scala\n*show*(chart)\n```", "```scala\nspark.stop()\n```", "```scala\npackage spark.ml.cookbook.chapter7\n```", "```scala\nimport org.apache.log4j.{Level, Logger} import org.apache.spark.sql.SparkSession import org.apache.spark.ml.recommendation.ALS\n```", "```scala\ncase class Movie(movieId: Int, title: String, year: Int, genre: Seq[String]) case class FullRating(userId: Int, movieId: Int, rating: Float, timestamp: Long)\n```", "```scala\n{numBlocks: -1, rank: 10, iterations: 10, lambda: 0.\nnumBlocks: -1,\nrank: 10,\niterations: 10,\nlambda: 0.01,\nimplicitPrefs: false,\nalpha: 1.0\n```"]